import { cached, cachedMtime } from '@isaacs/cached';
import { catcher, catchWrap } from '@isaacs/catcher';
import { readdirSync, readFileSync, realpathSync, statSync, } from 'fs';
import { isAbsolute, relative, resolve, sep } from 'path';
import { fileURLToPath, pathToFileURL } from 'url';
const cwd = process.cwd();
export const normalizeSlashes = (path) => path.includes('\\') ? path.replace(/\\/g, '/') : path;
export const readFile = cachedMtime(catchWrap((p) => readFileSync(p, 'utf8'), undefined));
const safeStat = catchWrap(statSync);
export const directoryExists = cached((p) => !!safeStat(p)?.isDirectory());
export const fileExists = cached((p) => !!safeStat(p)?.isFile());
export const realpath = cachedMtime((path) => catcher(() => realpathSync(path, 'utf8'), path));
export const getCurrentDirectory = () => cwd;
/* c8 ignore start */
const pathHasTrailingSlash = sep === '/'
    ? (p) => p.endsWith('/')
    : (p) => p.endsWith('/') || p.endsWith(sep);
/* c8 ignore stop */
export const normalizePath = cached((path) => {
    const trailingSlash = pathHasTrailingSlash(path);
    path = normalizeSlashes(path);
    const isFileUrl = path.startsWith('file://');
    if (isFileUrl)
        path = fileURLToPath(path);
    const isAbs = isFileUrl || isAbsolute(path);
    path = resolve(path);
    if (!isAbs)
        path = relative(cwd, path);
    if (isFileUrl)
        path = String(pathToFileURL(path));
    path = normalizeSlashes(path);
    if (trailingSlash)
        path += '/';
    if (sep === '\\') {
        // capitalize drive letters and UNC host/share names.
        path = path.replace(/^([a-z]:\/|\/\/[^\/]+\/[^\/]+)/, $ => $.toUpperCase());
    }
    return path;
});
const emptyFileSystemEntries = {
    files: [],
    directories: [],
};
const getFileSystemEntries = cachedMtime(catchWrap((path) => {
    const entries = readdirSync(path || '.', { withFileTypes: true });
    const files = [];
    const directories = [];
    for (const dirent of entries) {
        const entry = dirent.name;
        let stat;
        /* c8 ignore start */
        if (entry === '.' || entry === '..')
            continue;
        /* c8 ignore stop */
        if (dirent.isSymbolicLink()) {
            stat = safeStat(resolve(path, entry));
        }
        else {
            stat = dirent;
        }
        if (stat?.isFile())
            files.push(entry);
        else if (stat?.isDirectory())
            directories.push(entry);
    }
    files.sort((a, b) => a.localeCompare(b, 'en'));
    directories.sort((a, b) => a.localeCompare(b, 'en'));
    return { files, directories };
}, emptyFileSystemEntries));
export const getDirectories = (path) => getFileSystemEntries(path).directories;
export const getFiles = (path) => getFileSystemEntries(path).files;
//# sourceMappingURL=ts-sys-cached.js.map