"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SockDaemonClient = exports.ClientRequest = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const net_1 = require("net");
const path_1 = require("path");
const socket_post_message_1 = require("socket-post-message");
const url_1 = require("url");
const ping_js_1 = require("./ping.js");
const pid = process.pid;
let clientID = 0;
const isWindows = process.platform === 'win32';
/**
 * Class representing a single request from the SockDaemonClient
 *
 * Created by {@link SockDaemonClient#request}
 *
 * @internal
 */
class ClientRequest {
    #resolve;
    #reject;
    #signal;
    #onAbort;
    #onFinish;
    /**
     * The response returned by the Daemon, if resolved
     */
    response;
    /**
     * The request sent to the Daemon
     */
    request;
    /**
     * Promise which resolves when the response is received
     */
    promise;
    /**
     * Message ID request/response
     */
    id;
    constructor(
    /**
     * Request to be sent
     */
    request, 
    /**
     * Signal to abort the request
     */
    signal, 
    /**
     * Called on either success or failure
     */
    onFinish) {
        this.request = request;
        this.id = request.id;
        this.promise = new Promise((resolve, reject) => {
            this.#resolve = resolve;
            this.#reject = reject;
        });
        this.#signal = signal;
        this.#onAbort = (er) => this.reject(er);
        this.#onFinish = onFinish;
        signal?.addEventListener('abort', this.#onAbort);
    }
    /**
     * Cancel the request and fail the promise
     */
    reject(er) {
        /* c8 ignore next */
        if (!this.#reject)
            return;
        this.#onFinish();
        const reject = this.#reject;
        this.#reject = undefined;
        this.#resolve = undefined;
        this.#signal?.removeEventListener('abort', this.#onAbort);
        reject(er);
    }
    /**
     * Resolve the request with a response
     */
    resolve(r) {
        /* c8 ignore next */
        if (!this.#resolve)
            return;
        const q = this.request;
        if ((0, ping_js_1.isPing)(q) && (0, ping_js_1.isPong)(r, q)) {
            Object.assign(r, { duration: performance.now() - q.sent });
        }
        this.#onFinish();
        const resolve = this.#resolve;
        this.response = r;
        this.#resolve = undefined;
        this.#reject = undefined;
        this.#signal?.removeEventListener('abort', this.#onAbort);
        resolve(r);
    }
}
exports.ClientRequest = ClientRequest;
/**
 * Override this class to create a Client that can talk to the
 * SockDaemonServer you've created.
 *
 * Note that the static `serviceName` and `daemonScript` getters
 * MUST be defined on the extended class, referencing the service
 * name and location of the daemon script.
 */
class SockDaemonClient {
    #connected = false;
    #connection;
    #reader;
    #clientID = `${pid}-${clientID++}`;
    #msgID = 0;
    #requests = new Map();
    #path;
    #socket;
    #logFile;
    #pidFile;
    #mtimeFile;
    #serviceName;
    #daemonScript;
    #didPing = false;
    #ping;
    #pingTimer;
    #execArgv;
    #debug;
    constructor({ debug = false, execArgv = [], } = {}) {
        this.#execArgv = execArgv;
        this.#debug = debug;
        this.#serviceName = this.constructor.serviceName;
        this.#path = (0, path_1.resolve)(`.${this.#serviceName}/daemon`);
        this.#socket = (0, path_1.resolve)(this.#path, 'socket');
        const { daemonScript } = this
            .constructor;
        /* c8 ignore start */
        const s = typeof daemonScript === 'object' ||
            daemonScript.startsWith('file://')
            ? (0, url_1.fileURLToPath)(daemonScript)
            : daemonScript;
        /* c8 ignore stop */
        this.#daemonScript = s;
        /* c8 ignore start */
        if (isWindows) {
            this.#socket = (0, path_1.resolve)('//?/pipe/' + this.#socket);
        }
        /* c8 ignore stop */
        this.#logFile = (0, path_1.resolve)(this.#path, 'log');
        this.#pidFile = (0, path_1.resolve)(this.#path, 'pid');
        this.#mtimeFile = (0, path_1.resolve)(this.#path, 'mtime');
    }
    /**
     * Send a PING message to the server. This can be useful when you want
     * to start the daemon, without making any specific request.
     */
    async ping() {
        return await this.request((0, ping_js_1.ping)());
    }
    /**
     * Kill the server, if it is running.
     *
     * Attempts to send a SIGHUP to allow for graceful shutdown, but this
     * is not possible on Windows.
     */
    async kill() {
        const ps = await (0, promises_1.readFile)(this.#pidFile, 'utf8').catch(() => undefined);
        this.disconnect();
        if (!ps)
            return;
        const { stackTraceLimit } = Error;
        Error.stackTraceLimit = 0;
        let sigRes = false;
        /* c8 ignore start */
        if (!isWindows) {
            try {
                sigRes = process.kill(Number(ps), 'SIGHUP');
            }
            catch { }
        }
        if (isWindows || sigRes) {
            try {
                sigRes = process.kill(Number(ps), 'SIGTERM');
            }
            catch { }
        }
        /* c8 ignore stop */
        Error.stackTraceLimit = stackTraceLimit;
        if (sigRes) {
            await new Promise(r => setTimeout(r, 50));
        }
    }
    /**
     * The name of the service. Must match the value set in the
     * SockDaemonServer class this talks to.
     */
    static get serviceName() {
        throw new Error(`${this.constructor.name} class must define static 'serviceName' getter`);
    }
    /**
     * The location of the daemon script that starts up the
     * SockDaemonServer service that this client talks to.
     */
    static get daemonScript() {
        throw new Error(`${this.constructor.name} class must define static 'daemonScript' getter`);
    }
    /**
     * The execArgv that is used when spawning the daemon script.
     */
    get execArgv() {
        return this.#execArgv;
    }
    /**
     * List of current pending requests
     */
    get requests() {
        return [...this.#requests.values()];
    }
    /**
     * True if currently connected to the daemon service
     */
    get connected() {
        return this.#connected;
    }
    /**
     * The folder where this daemon service stores stuff
     */
    get path() {
        return this.#path;
    }
    /**
     * Path to the socket used by this service
     */
    get socket() {
        return this.#socket;
    }
    /**
     * Path where daemon logs are written
     */
    get logFile() {
        return this.#logFile;
    }
    /**
     * Path where the daemonScript mtime is written
     */
    get mtimeFile() {
        return this.#mtimeFile;
    }
    /**
     * File containing the daemon process ID
     */
    get pidFile() {
        return this.#pidFile;
    }
    /**
     * True if the client is currently connected
     */
    get connection() {
        return this.#connection;
    }
    /**
     * Returns true if the object is a {@link MessageBase}
     */
    isMessage(msg) {
        return (!!msg &&
            typeof msg === 'object' &&
            !Array.isArray(msg) &&
            typeof msg.id === 'string');
    }
    /**
     * Set to check that a response is valid
     */
    isResponse(msg) {
        return this.isMessage(msg);
    }
    async request(msg, signal) {
        this.#connection?.ref();
        const id = `${this.#clientID}-${this.#msgID++}`;
        const request = { ...msg, id };
        const cr = new ClientRequest(request, signal, () => {
            this.#requests.delete(id);
            if (!this.#requests.size)
                this.#connection?.unref();
        });
        this.#requests.set(id, cr);
        this.#checkMtime().then(() => {
            if (!this.#requests.has(id))
                return;
            if (!this.#connected) {
                /* c8 ignore next */
                if (!this.#connection?.connecting)
                    this.#connect();
            }
            else {
                const [head, body] = (0, socket_post_message_1.message)(request);
                this.#connection.write(head);
                this.#connection.write(body);
            }
        });
        return await cr.promise;
    }
    #mtimeCheckP;
    async #checkMtime() {
        if (this.#mtimeCheckP)
            return this.#mtimeCheckP;
        let resolve;
        this.#mtimeCheckP = new Promise(r => (resolve = r));
        const [mtimeExpect, mtimeActual] = await Promise.all([
            (0, promises_1.readFile)(this.#mtimeFile)
                /* c8 ignore next */
                .then(s => Number(s) || undefined)
                .catch(() => undefined),
            (0, promises_1.stat)(this.#daemonScript)
                .then(st => Number(st.mtime))
                .catch(undefined),
        ]);
        if (mtimeExpect && mtimeActual && mtimeExpect !== mtimeActual) {
            await Promise.all([
                (0, promises_1.unlink)(this.#mtimeFile).catch(() => { }),
                this.kill(),
            ]);
            resolve(true);
            this.#mtimeCheckP = undefined;
            return true;
        }
        else {
            resolve(false);
            this.#mtimeCheckP = undefined;
            return false;
        }
    }
    async #connect() {
        await Promise.all([
            (0, promises_1.mkdir)(this.#path, { recursive: true }),
            this.#checkMtime(),
        ]);
        this.#reader = new socket_post_message_1.Reader();
        const connection = (0, net_1.connect)(this.#socket, () => {
            this.#connected = true;
            if (!this.#didPing) {
                const id = `${this.#clientID}-${this.#msgID++}`;
                this.#ping = (0, ping_js_1.ping)(id);
                const [phead, pbody] = (0, socket_post_message_1.message)(this.#ping);
                connection.write(phead);
                connection.write(pbody);
                clearTimeout(this.#pingTimer);
                this.#pingTimer = setTimeout(() => {
                    connection.emit('error', Object.assign(new Error('ping timeout'), {
                        code: 'ENOENT',
                    }));
                }, 100);
            }
            // replay any pending requests
            for (const cr of this.#requests.values()) {
                const [head, body] = (0, socket_post_message_1.message)(cr.request);
                this.#connection?.write(head);
                this.#connection?.write(body);
            }
        });
        this.#connection = connection;
        connection.on('data', c => {
            /* c8 ignore next */
            if (connection !== this.#connection)
                return;
            this.#onData(c);
        });
        connection.on('close', () => {
            /* c8 ignore next */
            if (connection !== this.#connection)
                return;
            this.disconnect();
        });
        connection.on('error', (er) => {
            /* c8 ignore next */
            if (connection !== this.#connection)
                return;
            this.disconnect();
            if (er.code === 'ENOENT') {
                // start daemon
                const ea = this.#execArgv;
                const d = (0, child_process_1.spawn)(process.execPath, [...ea, this.#daemonScript], {
                    env: {
                        ...process.env,
                        /* c8 ignore start */
                        ...(this.#debug && {
                            NODE_DEBUG: `${process.env.NODE_DEBUG
                                ? process.env.NODE_DEBUG + ','
                                : ''}SOCK-DAEMON`,
                        }),
                        /* c8 ignore stop */
                        [`SOCK_DAEMON_SCRIPT_${this.#serviceName}`]: this.#daemonScript,
                    },
                    stdio: [
                        'ignore',
                        'pipe',
                        //'inherit',
                        //'pipe',
                        (0, fs_1.openSync)(this.#logFile, fs_1.constants.O_APPEND |
                            fs_1.constants.O_CREAT |
                            fs_1.constants.O_WRONLY),
                    ],
                    detached: true,
                });
                /* c8 ignore start */
                d.stderr?.on('data', c => process.stderr.write(c));
                /* c8 ignore stop */
                d.stdout.on('data', () => {
                    this.#connect();
                    d.stdout?.unref?.();
                });
                d.unref();
            }
        });
    }
    #onData(chunk) {
        for (const msg of this.#reader.write(chunk)) {
            if (this.#ping && (0, ping_js_1.isPong)(msg, this.#ping)) {
                this.#didPing = true;
                clearTimeout(this.#pingTimer);
            }
            const valid = this.isResponse(msg) || (0, ping_js_1.isPong)(msg);
            /* c8 ignore next */
            if (!valid)
                continue;
            const cr = this.#requests.get(msg.id);
            if (cr) {
                cr.resolve(msg);
            }
        }
    }
    /**
     * Immediately disconnect from the server. Pending requests will be
     * replayed on the next connection, unless clear() is called.
     */
    disconnect() {
        this.#connected = false;
        this.#connection?.unref();
        this.#connection?.destroy();
        this.#connection = undefined;
        this.#reader = undefined;
    }
    /**
     * Drop all pending requests
     */
    clear() {
        for (const [id, cr] of this.#requests) {
            cr.reject(new Error(`request ${id} aborted`));
        }
    }
}
exports.SockDaemonClient = SockDaemonClient;
//# sourceMappingURL=client.js.map