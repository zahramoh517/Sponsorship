"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFiles = exports.getDirectories = exports.normalizePath = exports.getCurrentDirectory = exports.realpath = exports.fileExists = exports.directoryExists = exports.readFile = exports.normalizeSlashes = void 0;
const cached_1 = require("@isaacs/cached");
const catcher_1 = require("@isaacs/catcher");
const fs_1 = require("fs");
const path_1 = require("path");
const url_1 = require("url");
const cwd = process.cwd();
const normalizeSlashes = (path) => path.includes('\\') ? path.replace(/\\/g, '/') : path;
exports.normalizeSlashes = normalizeSlashes;
exports.readFile = (0, cached_1.cachedMtime)((0, catcher_1.catchWrap)((p) => (0, fs_1.readFileSync)(p, 'utf8'), undefined));
const safeStat = (0, catcher_1.catchWrap)(fs_1.statSync);
exports.directoryExists = (0, cached_1.cached)((p) => !!safeStat(p)?.isDirectory());
exports.fileExists = (0, cached_1.cached)((p) => !!safeStat(p)?.isFile());
exports.realpath = (0, cached_1.cachedMtime)((path) => (0, catcher_1.catcher)(() => (0, fs_1.realpathSync)(path, 'utf8'), path));
const getCurrentDirectory = () => cwd;
exports.getCurrentDirectory = getCurrentDirectory;
/* c8 ignore start */
const pathHasTrailingSlash = path_1.sep === '/'
    ? (p) => p.endsWith('/')
    : (p) => p.endsWith('/') || p.endsWith(path_1.sep);
/* c8 ignore stop */
exports.normalizePath = (0, cached_1.cached)((path) => {
    const trailingSlash = pathHasTrailingSlash(path);
    path = (0, exports.normalizeSlashes)(path);
    const isFileUrl = path.startsWith('file://');
    if (isFileUrl)
        path = (0, url_1.fileURLToPath)(path);
    const isAbs = isFileUrl || (0, path_1.isAbsolute)(path);
    path = (0, path_1.resolve)(path);
    if (!isAbs)
        path = (0, path_1.relative)(cwd, path);
    if (isFileUrl)
        path = String((0, url_1.pathToFileURL)(path));
    path = (0, exports.normalizeSlashes)(path);
    if (trailingSlash)
        path += '/';
    if (path_1.sep === '\\') {
        // capitalize drive letters and UNC host/share names.
        path = path.replace(/^([a-z]:\/|\/\/[^\/]+\/[^\/]+)/, $ => $.toUpperCase());
    }
    return path;
});
const emptyFileSystemEntries = {
    files: [],
    directories: [],
};
const getFileSystemEntries = (0, cached_1.cachedMtime)((0, catcher_1.catchWrap)((path) => {
    const entries = (0, fs_1.readdirSync)(path || '.', { withFileTypes: true });
    const files = [];
    const directories = [];
    for (const dirent of entries) {
        const entry = dirent.name;
        let stat;
        /* c8 ignore start */
        if (entry === '.' || entry === '..')
            continue;
        /* c8 ignore stop */
        if (dirent.isSymbolicLink()) {
            stat = safeStat((0, path_1.resolve)(path, entry));
        }
        else {
            stat = dirent;
        }
        if (stat?.isFile())
            files.push(entry);
        else if (stat?.isDirectory())
            directories.push(entry);
    }
    files.sort((a, b) => a.localeCompare(b, 'en'));
    directories.sort((a, b) => a.localeCompare(b, 'en'));
    return { files, directories };
}, emptyFileSystemEntries));
const getDirectories = (path) => getFileSystemEntries(path).directories;
exports.getDirectories = getDirectories;
const getFiles = (path) => getFileSystemEntries(path).files;
exports.getFiles = getFiles;
//# sourceMappingURL=ts-sys-cached.js.map