{"version":3,"file":"language-service.js","sourceRoot":"","sources":["../../../src/service/language-service.ts"],"names":[],"mappings":"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","sourcesContent":["// Initialize the program in process.cwd, with the rootfiles\n// specified in the tsconfig.\n// This is slow! It is only done once per service instance.\n\nimport ts from 'typescript'\nimport { error, info, trace } from '../debug.js'\nimport {\n  directoryExists,\n  fileExists,\n  getCurrentDirectory,\n  getDirectories,\n  normalizePath,\n  readFile,\n  realpath,\n} from '../ts-sys-cached.js'\nimport {\n  fileContents,\n  fileVersions,\n  incProjectVersion,\n  projectVersion,\n} from './file-versions.js'\nimport {\n  getModuleResolutionCache,\n  getResolveModuleNameLiterals,\n} from './resolve-module-name-literals.js'\nimport { getResolveTypeReferenceDirectiveReferences } from './resolve-type-reference-directive-references.js'\nimport { tsconfig } from './tsconfig.js'\n\nlet lastConfig: ts.ParsedCommandLine\nexport type LSHostWithResolveModuleNameLiterals =\n  ts.LanguageServiceHost & {\n    resolveModuleNameLiterals: Exclude<\n      ts.LanguageServiceHost['resolveModuleNameLiterals'],\n      undefined\n    >\n  }\n\nexport type LanguageServiceWithHost = ts.LanguageService & {\n  getHost(): LSHostWithResolveModuleNameLiterals\n}\n\nlet lastService: LanguageServiceWithHost\n\nexport const getLanguageService = (): LanguageServiceWithHost => {\n  const config = tsconfig()\n  if (lastService && config === lastConfig) {\n    return lastService\n  }\n  lastConfig = config\n  const start = performance.now()\n\n  // spike script using a LanguageService host to do typechecking\n  const host: ts.LanguageServiceHost = {\n    readFile,\n    trace: config.options.traceResolution ? trace : undefined,\n\n    directoryExists,\n    realpath,\n    getCurrentDirectory,\n    getDirectories,\n    fileExists: path => {\n      if (fileVersions.has(normalizePath(path))) return true\n      return fileExists(path)\n    },\n    writeFile: ts.sys.writeFile,\n\n    useCaseSensitiveFileNames: () => ts.sys.useCaseSensitiveFileNames,\n\n    getCompilationSettings: () => config.options,\n    getNewLine: () => '\\n',\n    getProjectVersion: projectVersion,\n    getScriptFileNames: () => [...fileVersions.keys()],\n    getScriptVersion: (fileName: string) =>\n      String(fileVersions.get(fileName)),\n    getScriptSnapshot: (\n      fileName: string\n    ): ts.IScriptSnapshot | undefined => {\n      let contents = fileContents.get(fileName)\n\n      // Read contents into TypeScript memory cache.\n      if (contents === undefined) {\n        contents = readFile(fileName)\n        if (contents === undefined) return\n\n        fileVersions.set(fileName, 1)\n        fileContents.set(fileName, contents)\n        incProjectVersion()\n      }\n\n      return ts.ScriptSnapshot.fromString(contents)\n    },\n    getDefaultLibFileName: opt => ts.getDefaultLibFilePath(opt),\n    log: (s: string) => info(s),\n    error: (s: string) => error(s),\n  }\n\n  const hostWithResModNameLit: LSHostWithResolveModuleNameLiterals =\n    Object.assign(host, {\n      resolveTypeReferenceDirectiveReferences:\n        getResolveTypeReferenceDirectiveReferences(\n          host,\n          getModuleResolutionCache()\n        ),\n      resolveModuleNameLiterals: getResolveModuleNameLiterals(host),\n      getModuleResolutionCache,\n    })\n\n  const registry = ts.createDocumentRegistry(\n    ts.sys.useCaseSensitiveFileNames,\n    getCurrentDirectory()\n  )\n\n  lastService = Object.assign(\n    ts.createLanguageService(hostWithResModNameLit, registry),\n    {\n      getHost: () => hostWithResModNameLit,\n    }\n  )\n  const duration =\n    Math.floor((performance.now() - start) * 1000) / 1000\n  info('created language service', duration)\n  return lastService\n}\n"]}