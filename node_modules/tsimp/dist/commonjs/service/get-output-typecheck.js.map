{"version":3,"file":"get-output-typecheck.js","sourceRoot":"","sources":["../../../src/service/get-output-typecheck.ts"],"names":[],"mappings":";AAAA,+DAA+D;;;AAE/D,+BAA+B;AAE/B,0CAAwC;AACxC,yDAAmE;AACnE,+DAA0D;AAC1D,uFAAwE;AAExE,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAA;AAClB,MAAM,kBAAkB,GAAG,CAChC,IAAY,EACZ,QAAgB,EAIhB,EAAE;IACF,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;IAC/B,MAAM,OAAO,GAAG,IAAA,wCAAkB,GAAE,CAAA;IACpC,MAAM,cAAc,GAAG,OAAO,CAAC,UAAU,EAAE,CAAA;IAC3C,qBAAqB;IACrB,IAAI,CAAC,cAAc,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;KAC7C;IACD,oBAAoB;IACpB,IAAA,8BAAW,EAAC,QAAQ,CAAC,CAAA;IACrB,IAAA,sDAAoB,EAAC,QAAQ,CAAC,CAAA;IAC9B,IAAA,oCAAiB,EAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;IAEjC,qEAAqE;IACrE,+CAA+C;IAC/C,MAAM,aAAa,GAAG,OAAO,CAAC,UAAU,EAAE,CAAA;IAC1C,MAAM,EAAE,GAAG,aAAa,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAA;IAEjD,qBAAqB;IACrB,IAAI,CAAC,EAAE,EAAE;QACP,IAAA,eAAI,EAAC,kDAAkD,EAAE,QAAQ,CAAC,CAAA;QAClE,OAAO;YACL,UAAU,EAAE,IAAI;YAChB,WAAW,EAAE,EAAE;SAChB,CAAA;KACF;IACD,oBAAoB;IAEpB,IAAI,cAAc,IAAI,aAAa,KAAK,cAAc,EAAE;QACtD,IAAA,eAAI,EAAC,0BAA0B,EAAE,QAAQ,CAAC,CAAA;KAC3C;IAED,MAAM,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;IAE9C,MAAM,WAAW,GAAG,OAAO;SACxB,sBAAsB,CAAC,QAAQ,CAAC;SAChC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAA;IAEpD,MAAM,YAAY,GAAG,OAAO,CAAC,UAAU,EAAE,CAAA;IACzC,IAAI,aAAa,KAAK,YAAY,EAAE;QAClC,IAAA,eAAI,EAAC,2CAA2C,QAAQ,EAAE,CAAC,CAAA;KAC5D;IAED,IAAI;QACF,uCAAuC;QACvC,qBAAqB;QACrB,IAAI,MAAM,CAAC,WAAW,EAAE;YACtB,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,CAAA;SAC9C;QACD,IAAI,MAAM,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;YACnC,MAAM,IAAI,SAAS,CACjB,2BAA2B,IAAA,eAAQ,EAAC,GAAG,EAAE,QAAQ,CAAC,IAAI;gBACpD,kEAAkE;gBAClE,0DAA0D;gBAC1D,0DAA0D,CAC7D,CAAA;SACF;QACD,oBAAoB;QAEpB,OAAO;YACL,UAAU,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI;YACvC,WAAW;SACZ,CAAA;KACF;YAAS;QACR,MAAM,QAAQ,GACZ,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAA;QACvD,MAAM,GAAG,GAAG,IAAA,eAAQ,EAAC,GAAG,EAAE,QAAQ,CAAC,CAAA;QACnC,IAAA,eAAI,EAAC,wBAAwB,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAA;KAChD;AACH,CAAC,CAAA;AA3EY,QAAA,kBAAkB,sBA2E9B","sourcesContent":["// Get output with full type-checking from the LanguageService.\n\nimport { relative } from 'path'\nimport type ts from 'typescript'\nimport { info, warn } from '../debug.js'\nimport { addRootFile, updateFileVersion } from './file-versions.js'\nimport { getLanguageService } from './language-service.js'\nimport { markFileNameInternal } from './resolve-module-name-literals.js'\n\nconst cwd = process.cwd()\nexport const getOutputTypeCheck = (\n  code: string,\n  fileName: string\n): {\n  outputText: string | undefined\n  diagnostics: ts.Diagnostic[]\n} => {\n  const start = performance.now()\n  const service = getLanguageService()\n  const initialProgram = service.getProgram()\n  /* c8 ignore start */\n  if (!initialProgram) {\n    throw new Error('failed to load TS program')\n  }\n  /* c8 ignore stop */\n  addRootFile(fileName)\n  markFileNameInternal(fileName)\n  updateFileVersion(fileName, code)\n\n  // if we can't get the source file, then return the code un-compiled.\n  // Eg, loading a JS file if allowJs is not set.\n  const programBefore = service.getProgram()\n  const sf = programBefore?.getSourceFile(fileName)\n\n  /* c8 ignore start */\n  if (!sf) {\n    warn('could not get sourceFile, returning raw contents', fileName)\n    return {\n      outputText: code,\n      diagnostics: [],\n    }\n  }\n  /* c8 ignore stop */\n\n  if (initialProgram && programBefore !== initialProgram) {\n    info('compiler rebuilt Program', fileName)\n  }\n\n  const output = service.getEmitOutput(fileName)\n\n  const diagnostics = service\n    .getSemanticDiagnostics(fileName)\n    .concat(service.getSyntacticDiagnostics(fileName))\n\n  const programAfter = service.getProgram()\n  if (programBefore !== programAfter) {\n    warn(`service.program changed while compiling ${fileName}`)\n  }\n\n  try {\n    // these errors *should* be impossible.\n    /* c8 ignore start */\n    if (output.emitSkipped) {\n      return { outputText: undefined, diagnostics }\n    }\n    if (output.outputFiles.length === 0) {\n      throw new TypeError(\n        `Unable to require file: ${relative(cwd, fileName)}\\n` +\n          'This is usually the result of a faulty configuration or import. ' +\n          'Make sure there is a `.js`, `.json` or other executable ' +\n          'extension with loader attached before `tsimp` available.'\n      )\n    }\n    /* c8 ignore stop */\n\n    return {\n      outputText: output.outputFiles[0]?.text,\n      diagnostics,\n    }\n  } finally {\n    const duration =\n      Math.floor((performance.now() - start) * 1000) / 1000\n    const rel = relative(cwd, fileName)\n    info('emitted with typeCheck', [rel, duration])\n  }\n}\n"]}