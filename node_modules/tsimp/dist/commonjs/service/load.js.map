{"version":3,"file":"load.js","sourceRoot":"","sources":["../../../src/service/load.ts"],"names":[],"mappings":"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","sourcesContent":["// Load a module from disk, and compile it.\n// Result is cached by fileName + mtime, and cleared when config changes.\nimport { cachedMtime } from '@isaacs/cached'\nimport { mkdirSync, writeFileSync } from 'fs'\nimport { relative, resolve } from 'path'\nimport { ParsedCommandLine } from 'typescript'\nimport { info } from '../debug.js'\nimport { getOutputFile } from '../get-output-file.js'\nimport {\n  fileExists,\n  getCurrentDirectory,\n  normalizeSlashes,\n  readFile,\n} from '../ts-sys-cached.js'\nimport { CompileResult } from '../types.js'\nimport { compile } from './compile.js'\nimport { reportAll } from './diagnostic.js'\nimport { tsconfig } from './tsconfig.js'\n\nlet lastConfig: ParsedCommandLine\nconst cwd = getCurrentDirectory()\nlet didMkdirp = false\n\n// { fileName: jsFile, diagnostics: [...] }\nexport const load = (\n  fileName: string,\n  typeCheck = true,\n  pretty = true\n): CompileResult => {\n  fileName = resolve(fileName)\n  const config = tsconfig()\n\n  if (lastConfig && config !== lastConfig) {\n    compileTypeCheck.cache.clear()\n    compileTranspileOnly.cache.clear()\n    compileTypeCheck.mtimeCache.clear()\n    compileTranspileOnly.mtimeCache.clear()\n  }\n  lastConfig = config\n\n  // compile to a file on disk, but only if the source has changed.\n  const compile = typeCheck ? compileTypeCheck : compileTranspileOnly\n  const cachedMtime = compile.mtimeCache.get(fileName)?.[0]\n  const newMtime = compile.getMtime(fileName)\n  const outFile = getOutputFile(fileName)\n  const cachedResult = compile.cache.get(fileName)\n\n  if (\n    cachedMtime &&\n    cachedMtime === newMtime &&\n    fileExists(outFile) &&\n    cachedResult\n  ) {\n    // saw this one, and have previous build available\n    return {\n      fileName: outFile,\n      diagnostics: reportAll(cachedResult.diagnostics, pretty),\n    }\n  }\n\n  // have to perform the compilation\n  const start = performance.now()\n  const { outputText, diagnostics } = compile(fileName)\n  const duration =\n    Math.floor((performance.now() - start) * 1000) / 1000\n  info('compiled', [relative(process.cwd(), fileName), duration])\n\n  /* c8 ignore start */\n  if (!outputText) {\n    return { diagnostics: reportAll(diagnostics, pretty) }\n  }\n  /* c8 ignore stop */\n\n  if (!didMkdirp) {\n    didMkdirp = true\n    mkdirSync(resolve(cwd, '.tsimp/compiled'), { recursive: true })\n  }\n  writeFileSync(outFile, outputText)\n  return {\n    fileName: outFile,\n    diagnostics: reportAll(diagnostics, pretty),\n  }\n}\n\nconst compileTypeCheck = cachedMtime((fileName: string) => {\n  const normalizedFileName: string = normalizeSlashes(fileName)\n  /* c8 ignore next */\n  const content = readFile(fileName) || ''\n  return compile(content, normalizedFileName, true)\n})\n\nconst compileTranspileOnly = cachedMtime((fileName: string) => {\n  const normalizedFileName: string = normalizeSlashes(fileName)\n  /* c8 ignore next */\n  const content = readFile(fileName) || ''\n  return compile(content, normalizedFileName, false)\n})\n\nexport const loadTypeCheck = (path: string) => load(path, true)\nexport const loadTranspileOnly = (path: string) => load(path, false)\n"]}