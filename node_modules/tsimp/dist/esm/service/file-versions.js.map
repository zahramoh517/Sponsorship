{"version":3,"file":"file-versions.js","sourceRoot":"","sources":["../../../src/service/file-versions.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAA;AAExC,qCAAqC;AACrC,IAAI,MAAM,GAAkC,SAAS,CAAA;AACrD,IAAI,GAAG,GAA4B,SAAS,CAAA;AAC5C,MAAM,CAAC,MAAM,aAAa,GAAG,GAAG,EAAE;IAChC,MAAM,OAAO,GAAG,QAAQ,EAAE,CAAA;IAC1B,IAAI,OAAO,KAAK,MAAM,EAAE;QACtB,GAAG,GAAG,SAAS,CAAA;QACf,MAAM,GAAG,OAAO,CAAA;KACjB;IACD,OAAO,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAA;AACjD,CAAC,CAAA;AACD,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,GAAG,EAAkB,CAAA;AAErD,IAAI,iBAAiB,GAAG,CAAC,CAAA;AACzB,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,GAAG,CACjC,CAAC,GAAG,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CACpD,CAAA;AACD,MAAM,CAAC,MAAM,cAAc,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAA;AAC7D,MAAM,CAAC,MAAM,iBAAiB,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,EAAE,iBAAiB,CAAC,CAAA;AAElE,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,QAAgB,EAChB,QAAgB,EAChB,EAAE;IACF,MAAM,eAAe,GAAG,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;IACvD,MAAM,gBAAgB,GAAG,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IACnD,IAAI,QAAQ,KAAK,gBAAgB,EAAE;QACjC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,eAAe,GAAG,CAAC,CAAC,CAAA;QAC/C,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;QACpC,iBAAiB,EAAE,CAAA;KACpB;AACH,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,QAAgB,EAAE,EAAE;IAC9C,MAAM,GAAG,GAAG,aAAa,EAAE,CAAA;IAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;QACtB,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QACjB,iBAAiB,EAAE,CAAA;KACpB;AACH,CAAC,CAAA","sourcesContent":["import type { ParsedCommandLine } from 'typescript'\nimport { tsconfig } from './tsconfig.js'\n\n// a map of files versioned by number\nlet config: ParsedCommandLine | undefined = undefined\nlet rfn: Set<string> | undefined = undefined\nexport const rootFileNames = () => {\n  const newConf = tsconfig()\n  if (newConf !== config) {\n    rfn = undefined\n    config = newConf\n  }\n  return rfn ?? (rfn = new Set(config.fileNames))\n}\nexport const fileContents = new Map<string, string>()\n\nlet projectVersionNum = 0\nexport const fileVersions = new Map<string, number>(\n  [...rootFileNames()].map(fileName => [fileName, 0])\n)\nexport const projectVersion = () => String(projectVersionNum)\nexport const incProjectVersion = () => String(++projectVersionNum)\n\nexport const updateFileVersion = (\n  fileName: string,\n  contents: string\n) => {\n  const previousVersion = fileVersions.get(fileName) ?? 0\n  const previousContents = fileContents.get(fileName)\n  if (contents !== previousContents) {\n    fileVersions.set(fileName, previousVersion + 1)\n    fileContents.set(fileName, contents)\n    incProjectVersion()\n  }\n}\n\nexport const addRootFile = (fileName: string) => {\n  const rfn = rootFileNames()\n  if (!rfn.has(fileName)) {\n    rfn.add(fileName)\n    incProjectVersion()\n  }\n}\n"]}