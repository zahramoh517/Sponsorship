"use strict";
// Compile the input either in typecheck or transpile only mode, and
// fall back to a dialect-forced transpile-only result if the classifier
// gives us a different result than we want.
// This is not cached, it is cached at the load() level based on config
// and file change time.
Object.defineProperty(exports, "__esModule", { value: true });
exports.compile = void 0;
const classify_module_js_1 = require("../classify-module.js");
const ts_sys_cached_js_1 = require("../ts-sys-cached.js");
const get_output_typecheck_js_1 = require("./get-output-typecheck.js");
const transpile_only_js_1 = require("./transpile-only.js");
const compile = (code, fileName, typeCheck = true) => {
    const normalizedFileName = (0, ts_sys_cached_js_1.normalizeSlashes)(fileName);
    const classification = (0, classify_module_js_1.classifyModule)(normalizedFileName);
    const getOutput = typeCheck
        ? get_output_typecheck_js_1.getOutputTypeCheck
        : transpile_only_js_1.getOutputTranspileOnly;
    const forceOutput = classification === 'commonjs'
        ? transpile_only_js_1.getOutputForceCommonJS
        : transpile_only_js_1.getOutputForceESM;
    let { outputText, diagnostics } = getOutput(code, normalizedFileName);
    return {
        /* c8 ignore start */
        outputText: outputText ?? forceOutput(code, normalizedFileName).outputText,
        /* c8 ignore stop */
        diagnostics,
    };
};
exports.compile = compile;
//# sourceMappingURL=compile.js.map