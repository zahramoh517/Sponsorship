{"version":3,"file":"service.js","sourceRoot":"","sources":["../../../src/service/service.ts"],"names":[],"mappings":"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","sourcesContent":["// define the client and server for the persistent daemon that\n// does the compilation for the loader hooks.\nimport { parse } from 'node:path'\nimport { pathToFileURL } from 'node:url'\nimport { SockDaemonServer } from 'sock-daemon'\nimport { fileURLToPath } from 'url'\nimport { equivalents, isTSExt, tsExts } from '../equivalents.js'\nimport { getUrl } from '../get-url.js'\nimport { fileExists } from '../ts-sys-cached.js'\nimport {\n  CompileResult,\n  PreloadResult,\n  ResolveResult,\n  ServiceCompileRequest,\n  ServiceCompileResult,\n  ServicePreloadRequest,\n  ServiceRequest,\n  ServiceResolveRequest,\n  ServiceResolveResult,\n} from '../types.js'\nimport { getLanguageService } from './language-service.js'\nimport { load } from './load.js'\n\nexport const serviceName = 'tsimp'\nexport const daemonScript = fileURLToPath(\n  getUrl('./service/daemon.mjs')\n)\n\nconst findTsFile = (url: string | URL) => {\n  if (String(url).startsWith('file://')) {\n    const fileName = fileURLToPath(url)\n    const { ext } = parse(fileName)\n    const equivs = equivalents(fileName)\n    const checks = isTSExt(ext)\n      ? []\n      : equivs?.length\n      ? equivs\n      : tsExts.map(tsExt => fileName + tsExt)\n    checks.unshift(fileName)\n    for (const tsFile of [fileName, ...checks]) {\n      if (fileExists(tsFile)) {\n        return tsFile\n      }\n    }\n  }\n}\n\nexport class DaemonServer extends SockDaemonServer<\n  ServiceRequest,\n  ServiceResolveResult | ServiceCompileResult\n> {\n  static get serviceName() {\n    return serviceName\n  }\n\n  #handlePreload(_: ServicePreloadRequest): PreloadResult {\n    getLanguageService().getProgram()\n    return {}\n  }\n\n  #handleCompile(request: ServiceCompileRequest): CompileResult {\n    const sourceFile = findTsFile(request.fileName)\n    /* c8 ignore start */\n    if (!sourceFile) {\n      throw new Error(\n        'failed to resolve typescript source for ' + request.fileName\n      )\n    }\n    /* c8 ignore stop */\n    const { fileName, diagnostics } = load(\n      sourceFile,\n      request.diagMode !== 'ignore',\n      request.pretty\n    )\n    return { fileName, diagnostics }\n  }\n\n  #handleResolve(request: ServiceResolveRequest): ResolveResult {\n    const { url, parentURL } = request\n    const target =\n      url.startsWith('./') || url.startsWith('../')\n        ? String(new URL(url, parentURL))\n        : url\n    const tsFile = findTsFile(target)\n    if (tsFile) {\n      const url = new URL(target)\n      url.pathname = pathToFileURL(tsFile).pathname\n\n      if (tsFile) {\n        return {\n          url: String(url),\n        }\n      }\n    }\n    return {}\n  }\n\n  handle(\n    request:\n      | ServiceCompileRequest\n      | ServiceResolveRequest\n      | ServicePreloadRequest\n  ) {\n    switch (request.action) {\n      case 'compile':\n        return this.#handleCompile(request)\n      case 'resolve':\n        return this.#handleResolve(request)\n      case 'preload':\n        return this.#handlePreload(request)\n    }\n  }\n}\n"]}