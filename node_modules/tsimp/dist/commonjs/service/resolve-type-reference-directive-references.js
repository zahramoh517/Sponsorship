"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResolveTypeReferenceDirectiveReferences = void 0;
const typescript_1 = __importDefault(require("typescript"));
const ts_sys_cached_js_1 = require("../ts-sys-cached.js");
const create_mode_aware_cache_key_js_1 = require("./create-mode-aware-cache-key.js");
const get_canonical_filename_js_1 = require("./get-canonical-filename.js");
const tsconfig_js_1 = require("./tsconfig.js");
// ResolveTypeReferenceDirectiveReferences internal cache
const rtrdrInternalCache = new Map();
const getResolveTypeReferenceDirectiveReferences = (host, moduleResolutionCache) => {
    const config = (0, tsconfig_js_1.tsconfig)();
    const typeReferenceDirectiveResolutionCache = typescript_1.default.createTypeReferenceDirectiveResolutionCache((0, ts_sys_cached_js_1.getCurrentDirectory)(), get_canonical_filename_js_1.getCanonicalFileName, config.options, moduleResolutionCache.getPackageJsonInfoCache());
    const resolveTypeReferenceDirectiveReferences = (typeDirectiveReferences, containingFile, redirectedReference, options, containingSourceFile, _reusedNames) => {
        const entries = typeDirectiveReferences;
        const resolutionCache = typeReferenceDirectiveResolutionCache;
        const createLoader = typescript_1.default
            .createTypeReferenceResolutionLoader;
        /* c8 ignore start */
        if (typeDirectiveReferences.length === 0)
            return [];
        /* c8 ignore stop */
        const resolutions = [];
        const loader = createLoader(containingFile, redirectedReference, options, host, resolutionCache);
        for (const entry of entries) {
            const name = loader.nameAndMode.getName(entry);
            const mode = loader.nameAndMode.getMode(entry, containingSourceFile);
            const key = (0, create_mode_aware_cache_key_js_1.createModeAwareCacheKey)(name, mode);
            let result = rtrdrInternalCache.get(key);
            if (!result) {
                rtrdrInternalCache.set(key, (result = loader.resolve(name, mode)));
            }
            resolutions.push(result);
        }
        return resolutions;
    };
    return resolveTypeReferenceDirectiveReferences;
};
exports.getResolveTypeReferenceDirectiveReferences = getResolveTypeReferenceDirectiveReferences;
//# sourceMappingURL=resolve-type-reference-directive-references.js.map