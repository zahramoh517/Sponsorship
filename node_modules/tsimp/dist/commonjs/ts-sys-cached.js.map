{"version":3,"file":"ts-sys-cached.js","sourceRoot":"","sources":["../../src/ts-sys-cached.ts"],"names":[],"mappings":";;;AAAA,2CAAoD;AACpD,6CAAoD;AACpD,2BAQW;AACX,+BAAyD;AACzD,6BAAkD;AAClD,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAA;AAElB,MAAM,gBAAgB,GAAG,CAAC,IAAY,EAAU,EAAE,CACvD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;AAD1C,QAAA,gBAAgB,oBAC0B;AAE1C,QAAA,QAAQ,GAAG,IAAA,oBAAW,EACjC,IAAA,mBAAS,EAAC,CAAC,CAAS,EAAE,EAAE,CAAC,IAAA,iBAAY,EAAC,CAAC,EAAE,MAAM,CAAC,EAAE,SAAS,CAAC,CAC7D,CAAA;AAED,MAAM,QAAQ,GAAG,IAAA,mBAAS,EAAC,aAAQ,CAAC,CAAA;AACvB,QAAA,eAAe,GAAG,IAAA,eAAM,EACnC,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,CAC5C,CAAA;AACY,QAAA,UAAU,GAAG,IAAA,eAAM,EAC9B,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,CACvC,CAAA;AAEY,QAAA,QAAQ,GAAG,IAAA,oBAAW,EAAC,CAAC,IAAY,EAAE,EAAE,CACnD,IAAA,iBAAO,EAAC,GAAG,EAAE,CAAC,IAAA,iBAAY,EAAC,IAAI,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAChD,CAAA;AAEM,MAAM,mBAAmB,GAAG,GAAG,EAAE,CAAC,GAAG,CAAA;AAA/B,QAAA,mBAAmB,uBAAY;AAE5C,qBAAqB;AACrB,MAAM,oBAAoB,GACxB,UAAG,KAAK,GAAG;IACT,CAAC,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC;IAChC,CAAC,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAG,CAAC,CAAA;AACvD,oBAAoB;AAEP,QAAA,aAAa,GAAG,IAAA,eAAM,EAAC,CAAC,IAAY,EAAU,EAAE;IAC3D,MAAM,aAAa,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAA;IAChD,IAAI,GAAG,IAAA,wBAAgB,EAAC,IAAI,CAAC,CAAA;IAC7B,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAA;IAC5C,IAAI,SAAS;QAAE,IAAI,GAAG,IAAA,mBAAa,EAAC,IAAI,CAAC,CAAA;IACzC,MAAM,KAAK,GAAG,SAAS,IAAI,IAAA,iBAAU,EAAC,IAAI,CAAC,CAAA;IAC3C,IAAI,GAAG,IAAA,cAAO,EAAC,IAAI,CAAC,CAAA;IACpB,IAAI,CAAC,KAAK;QAAE,IAAI,GAAG,IAAA,eAAQ,EAAC,GAAG,EAAE,IAAI,CAAC,CAAA;IACtC,IAAI,SAAS;QAAE,IAAI,GAAG,MAAM,CAAC,IAAA,mBAAa,EAAC,IAAI,CAAC,CAAC,CAAA;IACjD,IAAI,GAAG,IAAA,wBAAgB,EAAC,IAAI,CAAC,CAAA;IAC7B,IAAI,aAAa;QAAE,IAAI,IAAI,GAAG,CAAA;IAC9B,IAAI,UAAG,KAAK,IAAI,EAAE;QAChB,qDAAqD;QACrD,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,gCAAgC,EAAE,CAAC,CAAC,EAAE,CACxD,CAAC,CAAC,WAAW,EAAE,CAChB,CAAA;KACF;IACD,OAAO,IAAI,CAAA;AACb,CAAC,CAAC,CAAA;AAMF,MAAM,sBAAsB,GAAsB;IAChD,KAAK,EAAE,EAAE;IACT,WAAW,EAAE,EAAE;CAChB,CAAA;AAED,MAAM,oBAAoB,GAAG,IAAA,oBAAW,EACtC,IAAA,mBAAS,EAAC,CAAC,IAAY,EAAqB,EAAE;IAC5C,MAAM,OAAO,GAAG,IAAA,gBAAW,EAAC,IAAI,IAAI,GAAG,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAA;IACjE,MAAM,KAAK,GAAa,EAAE,CAAA;IAC1B,MAAM,WAAW,GAAa,EAAE,CAAA;IAChC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;QAC5B,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAA;QACzB,IAAI,IAA8C,CAAA;QAClD,qBAAqB;QACrB,IAAI,KAAK,KAAK,GAAG,IAAI,KAAK,KAAK,IAAI;YAAE,SAAQ;QAC7C,oBAAoB;QACpB,IAAI,MAAM,CAAC,cAAc,EAAE,EAAE;YAC3B,IAAI,GAAG,QAAQ,CAAC,IAAA,cAAO,EAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAA;SACtC;aAAM;YACL,IAAI,GAAG,MAAM,CAAA;SACd;QACD,IAAI,IAAI,EAAE,MAAM,EAAE;YAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;aAChC,IAAI,IAAI,EAAE,WAAW,EAAE;YAAE,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;KACtD;IACD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAA;IAC9C,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAA;IACpD,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,CAAA;AAC/B,CAAC,EAAE,sBAAsB,CAAC,CAC3B,CAAA;AAEM,MAAM,cAAc,GAAG,CAAC,IAAY,EAAE,EAAE,CAC7C,oBAAoB,CAAC,IAAI,CAAC,CAAC,WAAW,CAAA;AAD3B,QAAA,cAAc,kBACa;AAEjC,MAAM,QAAQ,GAAG,CAAC,IAAY,EAAE,EAAE,CACvC,oBAAoB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAA;AADrB,QAAA,QAAQ,YACa","sourcesContent":["import { cached, cachedMtime } from '@isaacs/cached'\nimport { catcher, catchWrap } from '@isaacs/catcher'\nimport {\n  BigIntStats,\n  Dirent,\n  readdirSync,\n  readFileSync,\n  realpathSync,\n  Stats,\n  statSync,\n} from 'fs'\nimport { isAbsolute, relative, resolve, sep } from 'path'\nimport { fileURLToPath, pathToFileURL } from 'url'\nconst cwd = process.cwd()\n\nexport const normalizeSlashes = (path: string): string =>\n  path.includes('\\\\') ? path.replace(/\\\\/g, '/') : path\n\nexport const readFile = cachedMtime(\n  catchWrap((p: string) => readFileSync(p, 'utf8'), undefined)\n)\n\nconst safeStat = catchWrap(statSync)\nexport const directoryExists = cached(\n  (p: string) => !!safeStat(p)?.isDirectory()\n)\nexport const fileExists = cached(\n  (p: string) => !!safeStat(p)?.isFile()\n)\n\nexport const realpath = cachedMtime((path: string) =>\n  catcher(() => realpathSync(path, 'utf8'), path)\n)\n\nexport const getCurrentDirectory = () => cwd\n\n/* c8 ignore start */\nconst pathHasTrailingSlash =\n  sep === '/'\n    ? (p: string) => p.endsWith('/')\n    : (p: string) => p.endsWith('/') || p.endsWith(sep)\n/* c8 ignore stop */\n\nexport const normalizePath = cached((path: string): string => {\n  const trailingSlash = pathHasTrailingSlash(path)\n  path = normalizeSlashes(path)\n  const isFileUrl = path.startsWith('file://')\n  if (isFileUrl) path = fileURLToPath(path)\n  const isAbs = isFileUrl || isAbsolute(path)\n  path = resolve(path)\n  if (!isAbs) path = relative(cwd, path)\n  if (isFileUrl) path = String(pathToFileURL(path))\n  path = normalizeSlashes(path)\n  if (trailingSlash) path += '/'\n  if (sep === '\\\\') {\n    // capitalize drive letters and UNC host/share names.\n    path = path.replace(/^([a-z]:\\/|\\/\\/[^\\/]+\\/[^\\/]+)/, $ =>\n      $.toUpperCase()\n    )\n  }\n  return path\n})\n\nexport interface FileSystemEntries {\n  files: string[]\n  directories: string[]\n}\nconst emptyFileSystemEntries: FileSystemEntries = {\n  files: [],\n  directories: [],\n}\n\nconst getFileSystemEntries = cachedMtime(\n  catchWrap((path: string): FileSystemEntries => {\n    const entries = readdirSync(path || '.', { withFileTypes: true })\n    const files: string[] = []\n    const directories: string[] = []\n    for (const dirent of entries) {\n      const entry = dirent.name\n      let stat: Dirent | Stats | BigIntStats | undefined\n      /* c8 ignore start */\n      if (entry === '.' || entry === '..') continue\n      /* c8 ignore stop */\n      if (dirent.isSymbolicLink()) {\n        stat = safeStat(resolve(path, entry))\n      } else {\n        stat = dirent\n      }\n      if (stat?.isFile()) files.push(entry)\n      else if (stat?.isDirectory()) directories.push(entry)\n    }\n    files.sort((a, b) => a.localeCompare(b, 'en'))\n    directories.sort((a, b) => a.localeCompare(b, 'en'))\n    return { files, directories }\n  }, emptyFileSystemEntries)\n)\n\nexport const getDirectories = (path: string) =>\n  getFileSystemEntries(path).directories\n\nexport const getFiles = (path: string) =>\n  getFileSystemEntries(path).files\n"]}