{"version":3,"file":"classify-module.js","sourceRoot":"","sources":["../../src/classify-module.ts"],"names":[],"mappings":"AAAA,wEAAwE;AAExE,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAA;AAC5C,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA;AAC3C,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAA;AACvC,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAA;AACrC,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAA;AAG7C,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,CAAM,EAAwB,EAAE,CAChE,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,KAAK,UAAU,IAAI,CAAC,KAAK,QAAQ,CAAC,CAAA;AAE/D,MAAM,UAAU,GAAG,WAAW,CAC5B,SAAS,CAAC,CAAC,EAAU,EAAE,EAAE;IACvB,MAAM,QAAQ,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAA;IAC7B,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,SAAS,CAAA;KACjB;IACD,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAA;IACnC,OAAO,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAA;AAC9C,CAAC,CAAC,CACH,CAAA;AAED,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,QAAgB,EAA4B,EAAE;IAC3E,IAAI,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC9B,OAAO,MAAM,CAAA;KACd;IAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC5D,OAAO,UAAU,CAAA;KAClB;SAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QACjE,OAAO,QAAQ,CAAA;KAChB;SAAM;QACL,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE;YAC3C,MAAM,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,CAAA;YAClD,IAAI,CAAC;gBAAE,OAAO,CAAC,CAAA;SAChB;KACF;IACD,OAAO,UAAU,CAAA;AACnB,CAAC,CAAA","sourcesContent":["// figure out whether a given module should be interpreted as ESM or CJS\n\nimport { cachedMtime } from '@isaacs/cached'\nimport { catchWrap } from '@isaacs/catcher'\nimport { dirname, resolve } from 'path'\nimport { walkUp } from 'walk-up-path'\nimport { readFile } from './ts-sys-cached.js'\n\nexport type PackageJsonType = 'commonjs' | 'module'\nexport const isPackageJsonType = (t: any): t is PackageJsonType =>\n  typeof t === 'string' && (t === 'commonjs' || t === 'module')\n\nconst readPJType = cachedMtime(\n  catchWrap((pj: string) => {\n    const contents = readFile(pj)\n    if (!contents) {\n      return undefined\n    }\n    const t = JSON.parse(contents).type\n    return isPackageJsonType(t) ? t : 'commonjs'\n  })\n)\n\nexport const classifyModule = (fileName: string): PackageJsonType | 'json' => {\n  if (fileName.endsWith('.json')) {\n    return 'json'\n  } if (fileName.endsWith('.cts') || fileName.endsWith('.cjs')) {\n    return 'commonjs'\n  } else if (fileName.endsWith('.mts') || fileName.endsWith('.mjs')) {\n    return 'module'\n  } else {\n    for (const dir of walkUp(dirname(fileName))) {\n      const t = readPJType(resolve(dir, 'package.json'))\n      if (t) return t\n    }\n  }\n  return 'commonjs'\n}\n"]}