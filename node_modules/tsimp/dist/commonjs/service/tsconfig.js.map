{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../src/service/tsconfig.ts"],"names":[],"mappings":"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","sourcesContent":["// load the appropriate tsconfig.json file, and apply the tsimp\n// section overrides to it, if found.\n// This is designed to be called on demand. It will automatically reload\n// the config if the mtime of the located config file changes, and always\n// return the same object if it parses to the same values.\nimport { catcher } from '@isaacs/catcher'\nimport { statSync } from 'fs'\nimport { resolve } from 'path'\nimport ts from 'typescript'\nimport { walkUp } from 'walk-up-path'\nimport { error, warn } from '../debug.js'\nimport { readFile } from '../ts-sys-cached.js'\nimport { report } from './diagnostic.js'\n\nconst cwd = process.cwd()\nconst filename = process.env.TSIMP_PROJECT || 'tsconfig.json'\n\nlet loadedConfig: ts.ParsedCommandLine\nlet loadedConfigJSON: string\n\n// ms between checks to make sure the config hasn't changed.\n// overridable just so we can test it without waiting 100ms per test\n// in practice, this is more than fast enough for most cases.\n/* c8 ignore start */\nconst STAT_FREQ =\n  Number(process.env.TSIMP_CONFIG_DEBOUNCE ?? 100) || 100\n/* c8 ignore stop */\nlet lastStat: number = -1 * STAT_FREQ\nlet mtime: number = -1\nlet configPath: string\n\nexport const tsconfig = () => {\n  // reload the config when the file mtime changes.\n  if (loadedConfig && configPath) {\n    if (performance.now() - lastStat > STAT_FREQ) {\n      // if the stat fails, that's a change to the file.\n      const m = catcher(() => Number(statSync(configPath).mtime))\n      if (m === mtime) {\n        lastStat = performance.now()\n        return loadedConfig\n      }\n      /* c8 ignore start */\n    } else {\n      return loadedConfig\n    }\n    /* c8 ignore stop */\n  }\n\n  for (const dir of walkUp(cwd)) {\n    configPath = resolve(dir, filename)\n    const readResult = ts.readConfigFile(configPath, readFile)\n    const {\n      error,\n      config: { tsimp, ...config },\n    } = readResult\n    if (error) {\n      // cannot read file, keep looking\n      /* c8 ignore start */\n      if (error.code !== 5083) {\n        warn('could not load config file', configPath, report(error))\n      }\n      /* c8 ignore stop */\n      continue\n    }\n\n    // will definitely have it, because we got a result\n    mtime = Number(readFile.mtimeCache.get(configPath)?.[0])\n    lastStat = performance.now()\n\n    const configWithDefaults = applyOverrides(\n      // default rootDir to the folder containing tsconfig, if not\n      // set explicitly to something else, so we always have one.\n      // also default to recommended setting for node programs\n      {\n        compilerOptions: {\n          rootDir: dir,\n          skipLibCheck: true,\n          isolatedModules: true,\n          esModuleInterop: true,\n          lib: ['es2023'],\n          target: 'es2022',\n          strict: true,\n          forceConsistentCasingInFileNames: true,\n          // defaults that ts uses when transpiling\n          jsx: ts.JsxEmit.Preserve,\n        },\n      },\n      tsimp ? applyOverrides(config, tsimp) : config\n    )\n    const res = applyOverrides(configWithDefaults, {\n      compilerOptions: {\n        // settings that tsimp depends on, cannot be overridden\n        // virtual folder, nothing actually written to disk ever\n        outDir: resolve('.tsimp-compiled'),\n        module: 'nodenext',\n        moduleResolution: 'nodenext',\n        sourceMap: undefined,\n        sourceRoot: resolve(\n          dir,\n          configWithDefaults.compilerOptions.rootDir\n        ),\n        inlineSourceMap: true,\n        inlineSources: false,\n        declarationMap: false,\n        declaration: false,\n        noEmit: false,\n      },\n    })\n    const newConfig = ts.parseJsonConfigFileContent(res, ts.sys, dir)\n    const newConfigJSON = JSON.stringify(newConfig)\n    if (loadedConfig && newConfigJSON === loadedConfigJSON) {\n      // no changes, keep the old one\n      return loadedConfig\n    }\n    newConfig.options.configFilePath = configPath\n    loadedConfigJSON = newConfigJSON\n    return (loadedConfig = newConfig)\n  }\n  error(\n    `could not find config file named \"${filename}\", searching from \"${cwd}\"`\n  )\n  process.exit(1)\n}\n\nconst applyOverrides = (config: any, overrides?: any): any => {\n  if (\n    !overrides ||\n    typeof overrides !== 'object' ||\n    Array.isArray(overrides) ||\n    !config ||\n    typeof config !== 'object' ||\n    Array.isArray(config)\n  ) {\n    return overrides\n  }\n  return {\n    ...overrides,\n    ...Object.fromEntries(\n      Object.entries(config)\n        .map(([k, v]) => [\n          k,\n          k in overrides ? applyOverrides(v, overrides[k]) : v,\n        ])\n        .filter(([_, v]) => v !== undefined)\n    ),\n  }\n}\n"]}