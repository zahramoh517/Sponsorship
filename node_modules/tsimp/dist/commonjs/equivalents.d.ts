export declare const jsExts: readonly [".js", ".mjs", ".cjs", ".jsx"];
export declare const tsExts: readonly [".ts", ".mts", ".cts", ".tsx"];
export type JSExt = (typeof jsExts)[number];
export type TSExt = (typeof tsExts)[number];
export declare const isTSExt: (e: any) => e is ".cts" | ".mts" | ".ts" | ".tsx";
export declare const isJSExt: (e: any) => e is ".cjs" | ".mjs" | ".js" | ".jsx";
type MapBase = {
    [k in JSExt]: readonly TSExt[];
} & {
    [t in TSExt]: readonly JSExt[];
};
interface ExtMap extends MapBase {
    '.js': readonly ['.ts', '.tsx'];
    '.mjs': readonly ['.mts'];
    '.cjs': readonly ['.cts'];
    '.jsx': readonly ['.tsx'];
    '.ts': readonly ['.js'];
    '.mts': readonly ['.mjs'];
    '.cts': readonly ['.cjs'];
    '.tsx': readonly ['.js', '.jsx'];
}
export declare const map: ExtMap;
export declare const allExts: string[];
export declare const isExt: (e: any) => e is ".cts" | ".cjs" | ".mts" | ".mjs" | ".js" | ".jsx" | ".ts" | ".tsx";
export declare const equivalents: (path: string, extensionless?: boolean) => string[];
export {};
//# sourceMappingURL=equivalents.d.ts.map