{"version":3,"file":"resolve-module-name-literals.js","sourceRoot":"","sources":["../../../src/service/resolve-module-name-literals.ts"],"names":[],"mappings":"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","sourcesContent":["import ts from 'typescript'\nimport { equivalents } from '../equivalents.js'\nimport { getCurrentDirectory } from '../ts-sys-cached.js'\nimport { addRootFile } from './file-versions.js'\nimport { getCanonicalFileName } from './get-canonical-filename.js'\nimport { tsconfig } from './tsconfig.js'\n\n// reset cache on config change\nlet mrc: ts.ModuleResolutionCache | undefined = undefined\nlet config: ts.ParsedCommandLine | undefined = undefined\nexport const getModuleResolutionCache = () => {\n  const newConf = tsconfig()\n  if (newConf !== config) {\n    mrc = undefined\n    config = newConf\n  }\n  return (\n    mrc ??\n    (mrc = ts.createModuleResolutionCache(\n      getCurrentDirectory(),\n      getCanonicalFileName,\n      tsconfig().options,\n      undefined\n    ))\n  )\n}\n\nconst knownInternalFilenames = new Set<string>()\nconst internalBuckets = new Set<string>([''])\nconst moduleBucketRe = /.*\\/node_modules\\/(?:@[^\\/]+\\/)?[^\\/]+\\//\nconst getModuleBucket = (filename: string) => {\n  const find = moduleBucketRe.exec(filename)\n  if (find) return find[0]\n  return ''\n}\nconst markBucketOfFilenameInternal = (filename: string) =>\n  internalBuckets.add(getModuleBucket(filename))\nconst isFileInInternalBucket = (filename: string) =>\n  internalBuckets.has(getModuleBucket(filename))\nconst isFileKnownToBeInternal = (filename: string) =>\n  knownInternalFilenames.has(filename)\n\nconst fixupResolvedModule = (\n  resolvedModule:\n    | ts.ResolvedModule\n    | ts.ResolvedTypeReferenceDirective\n) => {\n  const { resolvedFileName } = resolvedModule\n  /* c8 ignore next */\n  if (resolvedFileName === undefined) return\n  // [MUST_UPDATE_FOR_NEW_FILE_EXTENSIONS]\n  // .ts,.mts,.cts is always switched to internal\n  // .js is switched on-demand\n  /* c8 ignore start */\n  if (\n    resolvedModule.isExternalLibraryImport &&\n    ((resolvedFileName.endsWith('.ts') &&\n      !resolvedFileName.endsWith('.d.ts')) ||\n      (resolvedFileName.endsWith('.cts') &&\n        !resolvedFileName.endsWith('.d.cts')) ||\n      (resolvedFileName.endsWith('.mts') &&\n        !resolvedFileName.endsWith('.d.mts')) ||\n      isFileKnownToBeInternal(resolvedFileName) ||\n      isFileInInternalBucket(resolvedFileName))\n  ) {\n    resolvedModule.isExternalLibraryImport = false\n  }\n  /* c8 ignore stop */\n  if (!resolvedModule.isExternalLibraryImport) {\n    knownInternalFilenames.add(resolvedFileName)\n  }\n}\n\nexport const getResolveModuleNameLiterals = (\n  host: ts.LanguageServiceHost\n): Exclude<\n  ts.LanguageServiceHost['resolveModuleNameLiterals'],\n  undefined\n> => {\n  const resolveModuleNameLiterals: (\n    moduleLiterals: readonly ts.StringLiteralLike[],\n    containingFile: string,\n    redirectedReference: ts.ResolvedProjectReference | undefined,\n    options: ts.CompilerOptions,\n    containingSourceFile: ts.SourceFile,\n    reusedNames: readonly ts.StringLiteralLike[] | undefined\n  ) => readonly ts.ResolvedModuleWithFailedLookupLocations[] = (\n    moduleLiterals,\n    containingFile,\n    redirectedReference,\n    options,\n    containingSourceFile,\n    _reusedNames\n  ) => {\n    return moduleLiterals.map((moduleLiteral, i) => {\n      const moduleName = moduleLiteral.text\n      const mode = containingSourceFile\n        ? (\n            ts as any as {\n              getModeForResolutionAtIndex?(\n                containingSourceFile: ts.SourceFile,\n                index: number\n              ):\n                | ts.ModuleKind.CommonJS\n                | ts.ModuleKind.ESNext\n                | undefined\n            }\n          ).getModeForResolutionAtIndex?.(containingSourceFile, i)\n        : /* c8 ignore start */\n          undefined\n      /* c8 ignore stop */\n      let { resolvedModule } = ts.resolveModuleName(\n        moduleName,\n        containingFile,\n        options,\n        host,\n        getModuleResolutionCache(),\n        redirectedReference,\n        mode\n      )\n      if (!resolvedModule) {\n        const lastDotIndex = moduleName.lastIndexOf('.')\n        const ext =\n          lastDotIndex >= 0 ? moduleName.slice(lastDotIndex) : ''\n        if (ext) {\n          const replacements = equivalents(\n            moduleName,\n            mode !== ts.ModuleKind.ESNext\n          )\n          for (const rep of replacements) {\n            ;({ resolvedModule } = ts.resolveModuleName(\n              rep,\n              containingFile,\n              options,\n              host,\n              getModuleResolutionCache(),\n              redirectedReference,\n              mode\n            ))\n            if (resolvedModule) break\n          }\n        }\n      }\n      if (resolvedModule) {\n        fixupResolvedModule(resolvedModule)\n      }\n      return { resolvedModule }\n    })\n  }\n  return resolveModuleNameLiterals\n}\n\nexport const markFileNameInternal = (fileName: string) => {\n  if (!isFileKnownToBeInternal(fileName)) {\n    markBucketOfFilenameInternal(fileName)\n  }\n  addRootFile(fileName)\n}\n"]}