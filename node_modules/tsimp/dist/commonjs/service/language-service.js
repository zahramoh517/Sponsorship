"use strict";
// Initialize the program in process.cwd, with the rootfiles
// specified in the tsconfig.
// This is slow! It is only done once per service instance.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLanguageService = void 0;
const typescript_1 = __importDefault(require("typescript"));
const debug_js_1 = require("../debug.js");
const ts_sys_cached_js_1 = require("../ts-sys-cached.js");
const file_versions_js_1 = require("./file-versions.js");
const resolve_module_name_literals_js_1 = require("./resolve-module-name-literals.js");
const resolve_type_reference_directive_references_js_1 = require("./resolve-type-reference-directive-references.js");
const tsconfig_js_1 = require("./tsconfig.js");
let lastConfig;
let lastService;
const getLanguageService = () => {
    const config = (0, tsconfig_js_1.tsconfig)();
    if (lastService && config === lastConfig) {
        return lastService;
    }
    lastConfig = config;
    const start = performance.now();
    // spike script using a LanguageService host to do typechecking
    const host = {
        readFile: ts_sys_cached_js_1.readFile,
        trace: config.options.traceResolution ? debug_js_1.trace : undefined,
        directoryExists: ts_sys_cached_js_1.directoryExists,
        realpath: ts_sys_cached_js_1.realpath,
        getCurrentDirectory: ts_sys_cached_js_1.getCurrentDirectory,
        getDirectories: ts_sys_cached_js_1.getDirectories,
        fileExists: path => {
            if (file_versions_js_1.fileVersions.has((0, ts_sys_cached_js_1.normalizePath)(path)))
                return true;
            return (0, ts_sys_cached_js_1.fileExists)(path);
        },
        writeFile: typescript_1.default.sys.writeFile,
        useCaseSensitiveFileNames: () => typescript_1.default.sys.useCaseSensitiveFileNames,
        getCompilationSettings: () => config.options,
        getNewLine: () => '\n',
        getProjectVersion: file_versions_js_1.projectVersion,
        getScriptFileNames: () => [...file_versions_js_1.fileVersions.keys()],
        getScriptVersion: (fileName) => String(file_versions_js_1.fileVersions.get(fileName)),
        getScriptSnapshot: (fileName) => {
            let contents = file_versions_js_1.fileContents.get(fileName);
            // Read contents into TypeScript memory cache.
            if (contents === undefined) {
                contents = (0, ts_sys_cached_js_1.readFile)(fileName);
                if (contents === undefined)
                    return;
                file_versions_js_1.fileVersions.set(fileName, 1);
                file_versions_js_1.fileContents.set(fileName, contents);
                (0, file_versions_js_1.incProjectVersion)();
            }
            return typescript_1.default.ScriptSnapshot.fromString(contents);
        },
        getDefaultLibFileName: opt => typescript_1.default.getDefaultLibFilePath(opt),
        log: (s) => (0, debug_js_1.info)(s),
        error: (s) => (0, debug_js_1.error)(s),
    };
    const hostWithResModNameLit = Object.assign(host, {
        resolveTypeReferenceDirectiveReferences: (0, resolve_type_reference_directive_references_js_1.getResolveTypeReferenceDirectiveReferences)(host, (0, resolve_module_name_literals_js_1.getModuleResolutionCache)()),
        resolveModuleNameLiterals: (0, resolve_module_name_literals_js_1.getResolveModuleNameLiterals)(host),
        getModuleResolutionCache: resolve_module_name_literals_js_1.getModuleResolutionCache,
    });
    const registry = typescript_1.default.createDocumentRegistry(typescript_1.default.sys.useCaseSensitiveFileNames, (0, ts_sys_cached_js_1.getCurrentDirectory)());
    lastService = Object.assign(typescript_1.default.createLanguageService(hostWithResModNameLit, registry), {
        getHost: () => hostWithResModNameLit,
    });
    const duration = Math.floor((performance.now() - start) * 1000) / 1000;
    (0, debug_js_1.info)('created language service', duration);
    return lastService;
};
exports.getLanguageService = getLanguageService;
//# sourceMappingURL=language-service.js.map