{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/client.ts"],"names":[],"mappings":";;;AAAA,+BAA8B;AAC9B,6CAA8C;AAC9C,6BAAkD;AAClD,6DAA4D;AAC5D,6CAAqC;AAWxB,QAAA,WAAW,GAAG,OAAgB,CAAA;AAC9B,QAAA,YAAY,GAAG,IAAA,mBAAa,EACvC,IAAA,mBAAM,EAAC,sBAAsB,CAAC,CAC/B,CAAA;AAED;;;GAGG;AACH,MAAa,YAAa,SAAQ,8BAGjC;IACC;;OAEG;IACH,MAAM,KAAK,WAAW;QACpB,OAAO,mBAAW,CAAA;IACpB,CAAC;IAED;;;OAGG;IACH,MAAM,KAAK,YAAY;QACrB,OAAO,oBAAY,CAAA;IACrB,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,OAAO,CAAC,MAAsB,EAAE;QACpC,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC;YAC3C,MAAM,EAAE,SAAS;YACjB,GAAG,GAAG;SACP,CAAC,CAAA;QACF,OAAO,MAAM,CAAA;IACf,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,OAAO,CACX,SAAiB,EACjB,WAAqB,IAAA,gCAAW,GAAE,EAClC,SAAkB,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK;QAExC,SAAS,GAAG,IAAA,cAAO,EAAC,SAAS,CAAC,CAAA;QAC9B,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC;YACpD,MAAM,EAAE,SAAS;YACjB,QAAQ,EAAE,MAAM,CAAC,IAAA,mBAAa,EAAC,SAAS,CAAC,CAAC;YAC1C,QAAQ;YACR,MAAM;SACP,CAAC,CAAkB,CAAA;QACpB,IAAI,QAAQ,KAAK,QAAQ,EAAE;YACzB,WAAW,CAAC,MAAM,GAAG,CAAC,CAAA;SACvB;QACD,IAAI,CAAC,QAAQ,KAAK,OAAO,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE;YAC7D,OAAO,EAAE,WAAW,EAAE,CAAA;SACvB;QACD,OAAO;YACL,QAAQ;YACR,WAAW;SACZ,CAAA;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAC,GAAW,EAAE,SAAkB;QAC3C,OAAO,CAEH,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC;YAClB,MAAM,EAAE,SAAS;YACjB,GAAG;YACH,SAAS;SACV,CAAC,CACH,EAAE,GAAG,IAAI,GAAG,CACd,CAAA;IACH,CAAC;CACF;AAhFD,oCAgFC","sourcesContent":["import { resolve } from 'path'\nimport { SockDaemonClient } from 'sock-daemon'\nimport { fileURLToPath, pathToFileURL } from 'url'\nimport { DiagMode, getDiagMode } from './diagnostic-mode.js'\nimport { getUrl } from './get-url.js'\nimport {\n  CompileResult,\n  PreloadRequest,\n  PreloadResult,\n  ResolveResult,\n  ServiceCompileResult,\n  ServiceRequest,\n  ServiceResolveResult,\n} from './types.js'\n\nexport const serviceName = 'tsimp' as const\nexport const daemonScript = fileURLToPath(\n  getUrl('./service/daemon.mjs')\n)\n\n/**\n * Client that can perform various tasks with the TSIMP Daemon\n * process.\n */\nexport class DaemonClient extends SockDaemonClient<\n  ServiceRequest,\n  ServiceResolveResult | ServiceCompileResult\n> {\n  /**\n   * Always 'tsimp'. Used by SockDaemon to know where to put stuff.\n   */\n  static get serviceName() {\n    return serviceName\n  }\n\n  /**\n   * Path to the script that is the daemon program for node to run\n   * on demand in the background.\n   */\n  static get daemonScript() {\n    return daemonScript\n  }\n\n  /**\n   * Explicitly start up the language service, used for type checking\n   *\n   * This is a slow operation, but it's somewhat rare that you'd need to do\n   * this explicitly, since it's done on demand when needed. Mostly this is\n   * for testing purposes.\n   */\n  async preload(req: PreloadRequest = {}): Promise<PreloadResult> {\n    const { id, ...result } = await this.request({\n      action: 'preload',\n      ...req,\n    })\n    return result\n  }\n\n  /**\n   * Compile the code contained in `inputFile`.\n   *\n   * Return the fileName that the resulting JS was written to, and a string[]\n   * of diagnostics.\n   */\n  async compile(\n    inputFile: string,\n    diagMode: DiagMode = getDiagMode(),\n    pretty: boolean = !!process.stderr.isTTY\n  ): Promise<CompileResult> {\n    inputFile = resolve(inputFile)\n    const { fileName, diagnostics } = (await this.request({\n      action: 'compile',\n      fileName: String(pathToFileURL(inputFile)),\n      diagMode,\n      pretty,\n    })) as CompileResult\n    if (diagMode === 'ignore') {\n      diagnostics.length = 0\n    }\n    if ((diagMode === 'error' && diagnostics.length) || !fileName) {\n      return { diagnostics }\n    }\n    return {\n      fileName,\n      diagnostics,\n    }\n  }\n\n  /**\n   * Translate a module identifier like ./src/foo.js into\n   * file:///path/to/src/foo.ts\n   * A file that isn't .ts or isn't a file:// url is returned as-is.\n   */\n  async resolve(url: string, parentURL?: string): Promise<string> {\n    return (\n      (\n        (await this.request({\n          action: 'resolve',\n          url,\n          parentURL,\n        })) as ResolveResult\n      )?.url ?? url\n    )\n  }\n}\n"]}