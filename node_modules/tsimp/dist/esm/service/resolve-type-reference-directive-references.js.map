{"version":3,"file":"resolve-type-reference-directive-references.js","sourceRoot":"","sources":["../../../src/service/resolve-type-reference-directive-references.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,YAAY,CAAA;AAC3B,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAA;AACzD,OAAO,EAAE,uBAAuB,EAAE,MAAM,kCAAkC,CAAA;AAC1E,OAAO,EAAE,oBAAoB,EAAE,MAAM,6BAA6B,CAAA;AAClE,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAA;AAExC,yDAAyD;AACzD,MAAM,kBAAkB,GAAG,IAAI,GAAG,EAG/B,CAAA;AAEH,MAAM,CAAC,MAAM,0CAA0C,GAAG,CACxD,IAA4B,EAC5B,qBAA+C,EAC/C,EAAE;IACF,MAAM,MAAM,GAAG,QAAQ,EAAE,CAAA;IACzB,MAAM,qCAAqC,GACzC,EAAE,CAAC,2CAA2C,CAC5C,mBAAmB,EAAE,EACrB,oBAAoB,EACpB,MAAM,CAAC,OAAO,EACd,qBAAqB,CAAC,uBAAuB,EAAE,CAChD,CAAA;IAEH,MAAM,uCAAuC,GAAG,CAC9C,uBAA+D,EAC/D,cAAsB,EACtB,mBAA4D,EAC5D,OAA2B,EAC3B,oBAAwD,EACxD,YAA4C,EAC2B,EAAE;QACzE,MAAM,OAAO,GAAG,uBAAuB,CAAA;QACvC,MAAM,eAAe,GAAG,qCAAqC,CAAA;QAC7D,MAAM,YAAY,GAAI,EAAU;aAC7B,mCAMK,CAAA;QAER,qBAAqB;QACrB,IAAI,uBAAuB,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,EAAE,CAAA;QACnD,oBAAoB;QACpB,MAAM,WAAW,GAAU,EAAE,CAAA;QAE7B,MAAM,MAAM,GAAG,YAAY,CACzB,cAAc,EACd,mBAAmB,EACnB,OAAO,EACP,IAAI,EACJ,eAAe,CAChB,CAAA;QACD,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE;YAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;YAC9C,MAAM,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,CACrC,KAAK,EACL,oBAAoB,CACrB,CAAA;YACD,MAAM,GAAG,GAAG,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YAC/C,IAAI,MAAM,GAAG,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;YACxC,IAAI,CAAC,MAAM,EAAE;gBACX,kBAAkB,CAAC,GAAG,CACpB,GAAG,EACH,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CACtC,CAAA;aACF;YACD,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;SACzB;QACD,OAAO,WAAW,CAAA;IACpB,CAAC,CAAA;IAED,OAAO,uCAAuC,CAAA;AAChD,CAAC,CAAA","sourcesContent":["import ts from 'typescript'\nimport { getCurrentDirectory } from '../ts-sys-cached.js'\nimport { createModeAwareCacheKey } from './create-mode-aware-cache-key.js'\nimport { getCanonicalFileName } from './get-canonical-filename.js'\nimport { tsconfig } from './tsconfig.js'\n\n// ResolveTypeReferenceDirectiveReferences internal cache\nconst rtrdrInternalCache = new Map<\n  string,\n  ts.ResolvedTypeReferenceDirectiveWithFailedLookupLocations\n>()\n\nexport const getResolveTypeReferenceDirectiveReferences = (\n  host: ts.LanguageServiceHost,\n  moduleResolutionCache: ts.ModuleResolutionCache\n) => {\n  const config = tsconfig()\n  const typeReferenceDirectiveResolutionCache =\n    ts.createTypeReferenceDirectiveResolutionCache(\n      getCurrentDirectory(),\n      getCanonicalFileName,\n      config.options,\n      moduleResolutionCache.getPackageJsonInfoCache()\n    )\n\n  const resolveTypeReferenceDirectiveReferences = (\n    typeDirectiveReferences: readonly (ts.FileReference | string)[],\n    containingFile: string,\n    redirectedReference: ts.ResolvedProjectReference | undefined,\n    options: ts.CompilerOptions,\n    containingSourceFile: ts.SourceFile | string | undefined,\n    _reusedNames?: (ts.FileReference | string)[]\n  ): readonly ts.ResolvedTypeReferenceDirectiveWithFailedLookupLocations[] => {\n    const entries = typeDirectiveReferences\n    const resolutionCache = typeReferenceDirectiveResolutionCache\n    const createLoader = (ts as any)\n      .createTypeReferenceResolutionLoader as (\n      containingFile: string,\n      redirectedReference: ts.ResolvedProjectReference | undefined,\n      options: ts.CompilerOptions,\n      host: ts.ModuleResolutionHost,\n      resolutionCache: ts.TypeReferenceDirectiveResolutionCache\n    ) => any\n\n    /* c8 ignore start */\n    if (typeDirectiveReferences.length === 0) return []\n    /* c8 ignore stop */\n    const resolutions: any[] = []\n\n    const loader = createLoader(\n      containingFile,\n      redirectedReference,\n      options,\n      host,\n      resolutionCache\n    )\n    for (const entry of entries) {\n      const name = loader.nameAndMode.getName(entry)\n      const mode = loader.nameAndMode.getMode(\n        entry,\n        containingSourceFile\n      )\n      const key = createModeAwareCacheKey(name, mode)\n      let result = rtrdrInternalCache.get(key)\n      if (!result) {\n        rtrdrInternalCache.set(\n          key,\n          (result = loader.resolve(name, mode))\n        )\n      }\n      resolutions.push(result)\n    }\n    return resolutions\n  }\n\n  return resolveTypeReferenceDirectiveReferences\n}\n"]}