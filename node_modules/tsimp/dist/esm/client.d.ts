import { SockDaemonClient } from 'sock-daemon';
import { DiagMode } from './diagnostic-mode.js';
import { CompileResult, PreloadRequest, PreloadResult, ServiceCompileResult, ServiceRequest, ServiceResolveResult } from './types.js';
export declare const serviceName: "tsimp";
export declare const daemonScript: string;
/**
 * Client that can perform various tasks with the TSIMP Daemon
 * process.
 */
export declare class DaemonClient extends SockDaemonClient<ServiceRequest, ServiceResolveResult | ServiceCompileResult> {
    /**
     * Always 'tsimp'. Used by SockDaemon to know where to put stuff.
     */
    static get serviceName(): "tsimp";
    /**
     * Path to the script that is the daemon program for node to run
     * on demand in the background.
     */
    static get daemonScript(): string;
    /**
     * Explicitly start up the language service, used for type checking
     *
     * This is a slow operation, but it's somewhat rare that you'd need to do
     * this explicitly, since it's done on demand when needed. Mostly this is
     * for testing purposes.
     */
    preload(req?: PreloadRequest): Promise<PreloadResult>;
    /**
     * Compile the code contained in `inputFile`.
     *
     * Return the fileName that the resulting JS was written to, and a string[]
     * of diagnostics.
     */
    compile(inputFile: string, diagMode?: DiagMode, pretty?: boolean): Promise<CompileResult>;
    /**
     * Translate a module identifier like ./src/foo.js into
     * file:///path/to/src/foo.ts
     * A file that isn't .ts or isn't a file:// url is returned as-is.
     */
    resolve(url: string, parentURL?: string): Promise<string>;
}
//# sourceMappingURL=client.d.ts.map