/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Serializable } from 'node:child_process';
import EventEmitter from 'node:events';
import { message, Reader } from './message.js';
export { message, Reader };
export interface StreamLike {
    write(chunk: Buffer): boolean;
    end(): StreamLike;
    on(ev: string | symbol, handler: (...a: any[]) => any): this;
}
export declare class MessageHost extends EventEmitter {
    #private;
    constructor(stream: StreamLike);
    get writable(): boolean;
    end(): void;
    postMessage(msg: Serializable): void;
    emit(event: 'message', data: Serializable): boolean;
    emit(event: 'error', er: unknown): boolean;
    on(event: 'message', handler: (data: Serializable) => any): this;
    on(event: 'error', handler: (er: Error | NodeJS.ErrnoException) => any): this;
    on(event: string | symbol, handler: (...data: any[]) => any): this;
}
export declare const socketPostMessage: (socket: StreamLike) => MessageHost;
//# sourceMappingURL=index.d.ts.map