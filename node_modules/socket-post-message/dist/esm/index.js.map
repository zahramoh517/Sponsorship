{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AACA,OAAO,YAAY,MAAM,aAAa,CAAA;AACtC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAA;AAC9C,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,CAAA;AAQ1B,MAAM,OAAO,WAAY,SAAQ,YAAY;IAC3C,OAAO,CAAY;IACnB,OAAO,CAAQ;IACf,SAAS,GAAG,IAAI,CAAA;IAEhB,YAAY,MAAkB;QAC5B,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,OAAO,GAAG,MAAM,CAAA;QACrB,IAAI,CAAC,OAAO,GAAG,IAAI,MAAM,EAAE,CAAA;QAC3B,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAA;QACrD,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAA;QACtD,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAA;QACxD,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,EAAW,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAA;IACnE,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAA;IACvB,CAAC;IAED,GAAG;QACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAA;QACtB,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAA;IACpB,CAAC;IAED,WAAW,CAAC,GAAiB;QAC3B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAA;SACvD;QACD,IAAI,MAAc,CAAA;QAClB,IAAI,IAAY,CAAA;QAChB,IAAI;YACF,CAAC;YAAA,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAA;SAC/B;QAAC,OAAO,EAAE,EAAE;YACX,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAA;YACtB,OAAM;SACP;QACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;QAC1B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IAC1B,CAAC;IAED,OAAO,CAAC,KAAa;QACnB,IAAI,IAAoB,CAAA;QACxB,IAAI;YACF,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;SACjC;QAAC,OAAO,EAAE,EAAE;YACX,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAA;SAC9B;QACD,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACtB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAA;SAC1B;IACH,CAAC;IAID,IAAI,CAAC,KAAsB,EAAE,GAAG,IAAW;QACzC,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAA;IACnC,CAAC;IAQD,EAAE,CAAC,KAAsB,EAAE,OAAgC;QACzD,OAAO,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;IACjC,CAAC;CACF;AAED,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,MAAkB,EAAE,EAAE,CACtD,IAAI,WAAW,CAAC,MAAM,CAAC,CAAA","sourcesContent":["import { Serializable } from 'node:child_process'\nimport EventEmitter from 'node:events'\nimport { message, Reader } from './message.js'\nexport { message, Reader }\n\nexport interface StreamLike {\n  write(chunk: Buffer): boolean\n  end(): StreamLike\n  on(ev: string | symbol, handler: (...a: any[]) => any): this\n}\n\nexport class MessageHost extends EventEmitter {\n  #stream: StreamLike\n  #reader: Reader\n  #writable = true\n\n  constructor(stream: StreamLike) {\n    super()\n    this.#stream = stream\n    this.#reader = new Reader()\n    this.#stream.on('data', chunk => this.#onData(chunk))\n    this.#stream.on('end', () => (this.#writable = false))\n    this.#stream.on('close', () => (this.#writable = false))\n    this.#stream.on('error', (er: unknown) => this.emit('error', er))\n  }\n\n  get writable() {\n    return this.#writable\n  }\n\n  end() {\n    this.#writable = false\n    this.#stream.end()\n  }\n\n  postMessage(msg: Serializable) {\n    if (!this.#writable) {\n      throw new Error('cannot postMessage after stream end')\n    }\n    let header: Buffer\n    let body: Buffer\n    try {\n      ;[header, body] = message(msg)\n    } catch (er) {\n      this.emit('error', er)\n      return\n    }\n    this.#stream.write(header)\n    this.#stream.write(body)\n  }\n\n  #onData(chunk: Buffer) {\n    let msgs: Serializable[]\n    try {\n      msgs = this.#reader.write(chunk)\n    } catch (er) {\n      return this.emit('error', er)\n    }\n    for (const msg of msgs) {\n      this.emit('message', msg)\n    }\n  }\n\n  emit(event: 'message', data: Serializable): boolean\n  emit(event: 'error', er: unknown): boolean\n  emit(event: string | symbol, ...data: any[]): boolean {\n    return super.emit(event, ...data)\n  }\n\n  on(event: 'message', handler: (data: Serializable) => any): this\n  on(\n    event: 'error',\n    handler: (er: Error | NodeJS.ErrnoException) => any\n  ): this\n  on(event: string | symbol, handler: (...data: any[]) => any): this\n  on(event: string | symbol, handler: (...data: any[]) => any): this {\n    return super.on(event, handler)\n  }\n}\n\nexport const socketPostMessage = (socket: StreamLike) =>\n  new MessageHost(socket)\n"]}