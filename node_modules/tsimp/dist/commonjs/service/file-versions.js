"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addRootFile = exports.updateFileVersion = exports.incProjectVersion = exports.projectVersion = exports.fileVersions = exports.fileContents = exports.rootFileNames = void 0;
const tsconfig_js_1 = require("./tsconfig.js");
// a map of files versioned by number
let config = undefined;
let rfn = undefined;
const rootFileNames = () => {
    const newConf = (0, tsconfig_js_1.tsconfig)();
    if (newConf !== config) {
        rfn = undefined;
        config = newConf;
    }
    return rfn ?? (rfn = new Set(config.fileNames));
};
exports.rootFileNames = rootFileNames;
exports.fileContents = new Map();
let projectVersionNum = 0;
exports.fileVersions = new Map([...(0, exports.rootFileNames)()].map(fileName => [fileName, 0]));
const projectVersion = () => String(projectVersionNum);
exports.projectVersion = projectVersion;
const incProjectVersion = () => String(++projectVersionNum);
exports.incProjectVersion = incProjectVersion;
const updateFileVersion = (fileName, contents) => {
    const previousVersion = exports.fileVersions.get(fileName) ?? 0;
    const previousContents = exports.fileContents.get(fileName);
    if (contents !== previousContents) {
        exports.fileVersions.set(fileName, previousVersion + 1);
        exports.fileContents.set(fileName, contents);
        (0, exports.incProjectVersion)();
    }
};
exports.updateFileVersion = updateFileVersion;
const addRootFile = (fileName) => {
    const rfn = (0, exports.rootFileNames)();
    if (!rfn.has(fileName)) {
        rfn.add(fileName);
        (0, exports.incProjectVersion)();
    }
};
exports.addRootFile = addRootFile;
//# sourceMappingURL=file-versions.js.map