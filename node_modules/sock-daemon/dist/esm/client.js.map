{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/client.ts"],"names":[],"mappings":"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","sourcesContent":["import { spawn } from 'child_process'\nimport { constants, openSync } from 'fs'\nimport { mkdir, readFile, stat, unlink } from 'fs/promises'\nimport { connect, Socket } from 'net'\nimport { resolve } from 'path'\nimport { message, Reader } from 'socket-post-message'\nimport { fileURLToPath } from 'url'\nimport { isPing, isPong, ping, Ping, Pong } from './ping.js'\nimport type { MessageBase } from './server.js'\n\nconst pid = process.pid\nlet clientID = 0\nconst isWindows = process.platform === 'win32'\n\n/**\n * Class representing a single request from the SockDaemonClient\n *\n * Created by {@link SockDaemonClient#request}\n *\n * @internal\n */\nexport class ClientRequest<\n  Request extends MessageBase,\n  Response extends MessageBase\n> {\n  #resolve?: (r: Response) => void\n  #reject?: (er: any) => void\n  #signal?: AbortSignal\n  #onAbort: (er: any) => void\n  #onFinish: () => void\n  /**\n   * The response returned by the Daemon, if resolved\n   */\n  response?: Response\n  /**\n   * The request sent to the Daemon\n   */\n  request: Request\n  /**\n   * Promise which resolves when the response is received\n   */\n  promise: Promise<Response>\n  /**\n   * Message ID request/response\n   */\n  id: string\n\n  constructor(\n    /**\n     * Request to be sent\n     */\n    request: Request,\n    /**\n     * Signal to abort the request\n     */\n    signal: AbortSignal | undefined,\n    /**\n     * Called on either success or failure\n     */\n    onFinish: () => void\n  ) {\n    this.request = request\n    this.id = request.id\n    this.promise = new Promise<Response>((resolve, reject) => {\n      this.#resolve = resolve\n      this.#reject = reject\n    })\n    this.#signal = signal\n    this.#onAbort = (er: any) => this.reject(er)\n    this.#onFinish = onFinish\n    signal?.addEventListener('abort', this.#onAbort)\n  }\n\n  /**\n   * Cancel the request and fail the promise\n   */\n  reject(er: any) {\n    /* c8 ignore next */\n    if (!this.#reject) return\n    this.#onFinish()\n    const reject = this.#reject\n    this.#reject = undefined\n    this.#resolve = undefined\n    this.#signal?.removeEventListener('abort', this.#onAbort)\n    reject(er)\n  }\n\n  /**\n   * Resolve the request with a response\n   */\n  resolve(r: Response) {\n    /* c8 ignore next */\n    if (!this.#resolve) return\n    const q = this.request\n    if (isPing(q) && isPong(r, q)) {\n      Object.assign(r, { duration: performance.now() - q.sent })\n    }\n    this.#onFinish()\n    const resolve = this.#resolve\n    this.response = r\n    this.#resolve = undefined\n    this.#reject = undefined\n    this.#signal?.removeEventListener('abort', this.#onAbort)\n    resolve(r)\n  }\n}\n\n/**\n * Options provided to SockDaemonClient constructor\n */\nexport interface SockDaemonClientOptions {\n  /**\n   * The execArgv used when spawning the daemonScript. Defaults to []\n   */\n  execArgv?: string[]\n  /**\n   * Set `debug: true` to start daemon in debug logging mode\n   */\n  debug?: boolean\n}\n\n/**\n * Override this class to create a Client that can talk to the\n * SockDaemonServer you've created.\n *\n * Note that the static `serviceName` and `daemonScript` getters\n * MUST be defined on the extended class, referencing the service\n * name and location of the daemon script.\n */\nexport abstract class SockDaemonClient<\n  Request extends MessageBase = MessageBase,\n  Response extends MessageBase = MessageBase\n> {\n  #connected: boolean = false\n  #connection?: Socket\n  #reader?: Reader\n  #clientID = `${pid}-${clientID++}`\n  #msgID = 0\n  #requests = new Map<string, ClientRequest<Request, Response>>()\n  #path: string\n  #socket: string\n  #logFile: string\n  #pidFile: string\n  #mtimeFile: string\n  #serviceName: string\n  #daemonScript: string\n\n  #didPing = false\n  #ping?: Ping\n  #pingTimer?: NodeJS.Timeout\n  #execArgv: string[]\n  #debug: boolean\n\n  constructor({\n    debug = false,\n    execArgv = [],\n  }: SockDaemonClientOptions = {}) {\n    this.#execArgv = execArgv\n    this.#debug = debug\n    this.#serviceName = (\n      this.constructor as typeof SockDaemonClient\n    ).serviceName\n    this.#path = resolve(`.${this.#serviceName}/daemon`)\n    this.#socket = resolve(this.#path, 'socket')\n    const { daemonScript } = this\n      .constructor as typeof SockDaemonClient\n    /* c8 ignore start */\n    const s =\n      typeof daemonScript === 'object' ||\n      daemonScript.startsWith('file://')\n        ? fileURLToPath(daemonScript)\n        : daemonScript\n    /* c8 ignore stop */\n    this.#daemonScript = s\n    /* c8 ignore start */\n    if (isWindows) {\n      this.#socket = resolve('//?/pipe/' + this.#socket)\n    }\n    /* c8 ignore stop */\n    this.#logFile = resolve(this.#path, 'log')\n    this.#pidFile = resolve(this.#path, 'pid')\n    this.#mtimeFile = resolve(this.#path, 'mtime')\n  }\n\n  /**\n   * Send a PING message to the server. This can be useful when you want\n   * to start the daemon, without making any specific request.\n   */\n  async ping(): Promise<Pong & { duration: number }> {\n    return await this.request(ping())\n  }\n\n  /**\n   * Kill the server, if it is running.\n   *\n   * Attempts to send a SIGHUP to allow for graceful shutdown, but this\n   * is not possible on Windows.\n   */\n  async kill() {\n    const ps = await readFile(this.#pidFile, 'utf8').catch(\n      () => undefined\n    )\n    this.disconnect()\n    if (!ps) return\n    const { stackTraceLimit } = Error\n    Error.stackTraceLimit = 0\n    let sigRes: boolean = false\n    /* c8 ignore start */\n    if (!isWindows) {\n      try {\n        sigRes = process.kill(Number(ps), 'SIGHUP')\n      } catch {}\n    }\n    if (isWindows || sigRes) {\n      try {\n        sigRes = process.kill(Number(ps), 'SIGTERM')\n      } catch {}\n    }\n    /* c8 ignore stop */\n    Error.stackTraceLimit = stackTraceLimit\n    if (sigRes) {\n      await new Promise<void>(r => setTimeout(r, 50))\n    }\n  }\n\n  /**\n   * The name of the service. Must match the value set in the\n   * SockDaemonServer class this talks to.\n   */\n  static get serviceName(): string {\n    throw new Error(\n      `${this.constructor.name} class must define static 'serviceName' getter`\n    )\n  }\n  /**\n   * The location of the daemon script that starts up the\n   * SockDaemonServer service that this client talks to.\n   */\n  static get daemonScript(): string | URL {\n    throw new Error(\n      `${this.constructor.name} class must define static 'daemonScript' getter`\n    )\n  }\n\n  /**\n   * The execArgv that is used when spawning the daemon script.\n   */\n  get execArgv() {\n    return this.#execArgv\n  }\n\n  /**\n   * List of current pending requests\n   */\n  get requests() {\n    return [...this.#requests.values()]\n  }\n\n  /**\n   * True if currently connected to the daemon service\n   */\n  get connected() {\n    return this.#connected\n  }\n\n  /**\n   * The folder where this daemon service stores stuff\n   */\n  get path() {\n    return this.#path\n  }\n\n  /**\n   * Path to the socket used by this service\n   */\n  get socket() {\n    return this.#socket\n  }\n\n  /**\n   * Path where daemon logs are written\n   */\n  get logFile() {\n    return this.#logFile\n  }\n\n  /**\n   * Path where the daemonScript mtime is written\n   */\n  get mtimeFile() {\n    return this.#mtimeFile\n  }\n\n  /**\n   * File containing the daemon process ID\n   */\n  get pidFile() {\n    return this.#pidFile\n  }\n\n  /**\n   * True if the client is currently connected\n   */\n  get connection() {\n    return this.#connection\n  }\n\n  /**\n   * Returns true if the object is a {@link MessageBase}\n   */\n  isMessage(msg: any): msg is MessageBase {\n    return (\n      !!msg &&\n      typeof msg === 'object' &&\n      !Array.isArray(msg) &&\n      typeof msg.id === 'string'\n    )\n  }\n\n  /**\n   * Set to check that a response is valid\n   */\n  isResponse(msg: any): msg is Response {\n    return this.isMessage(msg)\n  }\n\n  /**\n   * Send a request. The `id` property is made optional, because it will\n   * be overridden anyway by a generated message ID. Starts the daemon\n   * script automatically if not already running, and connects if needed.\n   *\n   * If an AbortSignal is provided, then the request will be dropped on\n   * an abort signal, and the promise rejected with the abort reason, if\n   * it has not already been resolved.\n   */\n  async request(\n    msg: Omit<Ping, 'id'>,\n    signal?: AbortSignal\n  ): Promise<Pong & { duration: number }>\n  async request(\n    msg: Omit<Request, 'id'>,\n    signal?: AbortSignal\n  ): Promise<Response>\n  async request(\n    msg: (Omit<Request, 'id'> & { id?: string }) | Omit<Ping, 'id'>,\n    signal?: AbortSignal\n  ): Promise<Response | (Pong & { duration: number })> {\n    this.#connection?.ref()\n    const id = `${this.#clientID}-${this.#msgID++}`\n    const request = { ...msg, id } as Request\n    const cr = new ClientRequest<Request, Response>(\n      request,\n      signal,\n      () => {\n        this.#requests.delete(id)\n        if (!this.#requests.size) this.#connection?.unref()\n      }\n    )\n    this.#requests.set(id, cr)\n    this.#checkMtime().then(() => {\n      if (!this.#requests.has(id)) return\n      if (!this.#connected) {\n        /* c8 ignore next */\n        if (!this.#connection?.connecting) this.#connect()\n      } else {\n        const [head, body] = message(request)\n        this.#connection!.write(head)\n        this.#connection!.write(body)\n      }\n    })\n    return await cr.promise\n  }\n\n  #mtimeCheckP?: Promise<boolean>\n  async #checkMtime(): Promise<boolean> {\n    if (this.#mtimeCheckP) return this.#mtimeCheckP\n    let resolve!: (b: boolean) => void\n    this.#mtimeCheckP = new Promise<boolean>(r => (resolve = r))\n    const [mtimeExpect, mtimeActual] = await Promise.all([\n      readFile(this.#mtimeFile)\n        /* c8 ignore next */\n        .then(s => Number(s) || undefined)\n        .catch(() => undefined),\n      stat(this.#daemonScript)\n        .then(st => Number(st.mtime))\n        .catch(undefined),\n    ])\n    if (mtimeExpect && mtimeActual && mtimeExpect !== mtimeActual) {\n      await Promise.all([\n        unlink(this.#mtimeFile).catch(() => {}),\n        this.kill(),\n      ])\n      resolve(true)\n      this.#mtimeCheckP = undefined\n      return true\n    } else {\n      resolve(false)\n      this.#mtimeCheckP = undefined\n      return false\n    }\n  }\n\n  async #connect() {\n    await Promise.all([\n      mkdir(this.#path, { recursive: true }),\n      this.#checkMtime(),\n    ])\n    this.#reader = new Reader()\n    const connection = connect(this.#socket, () => {\n      this.#connected = true\n      if (!this.#didPing) {\n        const id = `${this.#clientID}-${this.#msgID++}`\n        this.#ping = ping(id)\n        const [phead, pbody] = message(this.#ping)\n        connection.write(phead)\n        connection.write(pbody)\n        clearTimeout(this.#pingTimer)\n        this.#pingTimer = setTimeout(() => {\n          connection.emit(\n            'error',\n            Object.assign(new Error('ping timeout'), {\n              code: 'ENOENT',\n            })\n          )\n        }, 100)\n      }\n\n      // replay any pending requests\n      for (const cr of this.#requests.values()) {\n        const [head, body] = message(cr.request)\n        this.#connection?.write(head)\n        this.#connection?.write(body)\n      }\n    })\n    this.#connection = connection\n    connection.on('data', c => {\n      /* c8 ignore next */\n      if (connection !== this.#connection) return\n      this.#onData(c)\n    })\n    connection.on('close', () => {\n      /* c8 ignore next */\n      if (connection !== this.#connection) return\n      this.disconnect()\n    })\n    connection.on('error', (er: NodeJS.ErrnoException) => {\n      /* c8 ignore next */\n      if (connection !== this.#connection) return\n      this.disconnect()\n      if (er.code === 'ENOENT') {\n        // start daemon\n        const ea = this.#execArgv\n        const d = spawn(\n          process.execPath,\n          [...ea, this.#daemonScript],\n          {\n            env: {\n              ...process.env,\n              /* c8 ignore start */\n              ...(this.#debug && {\n                NODE_DEBUG: `${\n                  process.env.NODE_DEBUG\n                    ? process.env.NODE_DEBUG + ','\n                    : ''\n                }SOCK-DAEMON`,\n              }),\n              /* c8 ignore stop */\n              [`SOCK_DAEMON_SCRIPT_${this.#serviceName}`]:\n                this.#daemonScript,\n            },\n            stdio: [\n              'ignore',\n              'pipe',\n              //'inherit',\n              //'pipe',\n              openSync(\n                this.#logFile,\n                constants.O_APPEND |\n                  constants.O_CREAT |\n                  constants.O_WRONLY\n              ),\n            ],\n            detached: true,\n          }\n        )\n        /* c8 ignore start */\n        d.stderr?.on('data', c => process.stderr.write(c))\n        /* c8 ignore stop */\n        d.stdout!.on('data', () => {\n          this.#connect()\n          ;(d.stdout as Socket)?.unref?.()\n        })\n        d.unref()\n      }\n    })\n  }\n\n  #onData(chunk: Buffer) {\n    for (const msg of this.#reader!.write(chunk)) {\n      if (this.#ping && isPong(msg, this.#ping)) {\n        this.#didPing = true\n        clearTimeout(this.#pingTimer)\n      }\n      const valid = this.isResponse(msg) || isPong(msg)\n      /* c8 ignore next */\n      if (!valid) continue\n      const cr = this.#requests.get(msg.id)\n      if (cr) {\n        cr.resolve(msg as Response)\n      }\n    }\n  }\n\n  /**\n   * Immediately disconnect from the server. Pending requests will be\n   * replayed on the next connection, unless clear() is called.\n   */\n  disconnect() {\n    this.#connected = false\n    this.#connection?.unref()\n    this.#connection?.destroy()\n    this.#connection = undefined\n    this.#reader = undefined\n  }\n\n  /**\n   * Drop all pending requests\n   */\n  clear() {\n    for (const [id, cr] of this.#requests) {\n      cr.reject(new Error(`request ${id} aborted`))\n    }\n  }\n}\n"]}